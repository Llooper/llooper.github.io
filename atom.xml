<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[FLINT LI's Blog]]></title>
  <subtitle><![CDATA[Walk steps step by step]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="flintli.xyz/"/>
  <updated>2016-06-20T09:32:14.000Z</updated>
  <id>flintli.xyz/</id>
  
  <author>
    <name><![CDATA[FLINT LI]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[好的Blog应该跟大家分享]]></title>
    <link href="flintli.xyz/2100/05/24/Android-study/"/>
    <id>flintli.xyz/2100/05/24/Android-study/</id>
    <published>2100-05-24T07:13:57.000Z</published>
    <updated>2016-06-20T09:32:14.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">老罗的Android学习之路</a><br>多去别人的blog逛逛，老罗很牛逼，要多学习。</p>
<p><a href="http://wangkuiwu.github.io/2100/01/01/index/" target="_blank" rel="external">wangkuiwu’ Homepage</a>看到最好的blog之一，很值得学习，进修ing。。。</p>
<p><a href="http://gityuan.com/" target="_blank" rel="external">http://gityuan.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">老罗的Android学习之路</a><br>多去别人的blog逛逛，老罗很牛]]>
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 蓝牙 BLE Central实现]]></title>
    <link href="flintli.xyz/2016/06/27/Android-bluetooth-BLE-central/"/>
    <id>flintli.xyz/2016/06/27/Android-bluetooth-BLE-central/</id>
    <published>2016-06-27T07:34:03.000Z</published>
    <updated>2016-06-27T07:38:27.000Z</updated>
    <content type="html"><![CDATA[<p>Android蓝牙4.0的BLE协议中，有两个角色，一个是中心（<code>Central</code>），一个是周边（<code>Periphery</code>），本篇主要介绍BLE Central的实现过程。</p>
<a id="more"></a>
<p>以下是全文</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android蓝牙4.0的BLE协议中，有两个角色，一个是中心（<code>Central</code>），一个是周边（<code>Periphery</code>），本篇主要介绍BLE Central的实现过程。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
      <category term="BLE" scheme="flintli.xyz/tags/BLE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 蓝牙 BLE Periphery实现]]></title>
    <link href="flintli.xyz/2016/06/27/Android-bluetooth-BLE-periphery/"/>
    <id>flintli.xyz/2016/06/27/Android-bluetooth-BLE-periphery/</id>
    <published>2016-06-27T07:34:03.000Z</published>
    <updated>2016-06-27T07:38:35.000Z</updated>
    <content type="html"><![CDATA[<p>Android蓝牙4.0的BLE协议中，有两个角色，一个是中心（<code>Central</code>），一个是周边（<code>Periphery</code>）。本篇主要介绍BLE periphery的实现过程，BLE的介绍以及central的实现另外的篇幅再介绍。</p>
<a id="more"></a>
<h2 id="u7B80_u8FF0"><a href="#u7B80_u8FF0" class="headerlink" title="简述"></a>简述</h2><p>BLE periphery与central是通过建立GATT连接，实现<code>GATT server</code>和<code>GATT client</code>去传输数据。一个central可以同时连接多个periphery，但是一个periphery某一个时间点只能连接一个central。</p>
<blockquote>
<p>GATT Client —— 从GATT服务器读/写数据的设备。<br>GATT Server —— 包含客户端需要读/写的数据的设备。</p>
</blockquote>
<h2 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h2><p>了解了一些基本的概念之后，进入periphery的实现介绍。</p>
<h3 id="u6743_u9650_u6DFB_u52A0"><a href="#u6743_u9650_u6DFB_u52A0" class="headerlink" title="权限添加"></a>权限添加</h3><p>对蓝牙进行相关操作，都需要从系统获取相应的权限，BLE periphery需要实现广播BLE设备信号，须在<code>AndroidManifest.xml</code>添加如下权限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="u5B9E_u73B0_u8FC7_u7A0B"><a href="#u5B9E_u73B0_u8FC7_u7A0B" class="headerlink" title="实现过程"></a>实现过程</h3><p><code>BluetoothGattServer</code>作为周边来提供数据；<br><code>BluetoothGattServerCallback</code>返回周边的状态。</p>
<h4 id="1-_u83B7_u53D6_u84DD_u7259Adapter"><a href="#1-_u83B7_u53D6_u84DD_u7259Adapter" class="headerlink" title="1.获取蓝牙Adapter"></a>1.获取蓝牙Adapter</h4><p>首先要获取系统蓝牙服务，判断设备是否支持BLE 广播。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">BluetoothManager mManager;</span><br><span class="line">BluetoothAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">init</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == mManager)</span><br><span class="line">            mManager = (BluetoothManager)context.getSystemService(Context.BLUETOOTH_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == mManager)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span> == context.getPackageManager().</span><br><span class="line">                hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE))</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == mAdapter)</span><br><span class="line">            mAdapter = mManager.getAdapter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span> == mAdapter.isMultipleAdvertisementSupported())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        mContext = context;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(-<span class="number">1</span> == sts)</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"this device is without bluetooth module"</span>,</span><br><span class="line">                        Toast.LENGTH_LONG).show();</span><br><span class="line">    <span class="keyword">if</span>(-<span class="number">2</span> == sts)</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"this device do not support Bluetooth low energy"</span>,</span><br><span class="line">                        Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(-<span class="number">3</span> == sts)</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"this device do not support to be a BLE peripheral, "</span> +</span><br><span class="line">                                <span class="string">"please buy nexus 6 or 9 then try again"</span>,</span><br><span class="line">                        Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure>
<h4 id="2-new__u4E00_u4E2A_u7279_u5F81"><a href="#2-new__u4E00_u4E2A_u7279_u5F81" class="headerlink" title="2.new 一个特征"></a>2.new 一个特征</h4><p>定义一个Characteristic UUID，并new一个特征。    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String SOFTWARE_REVISION_STRING = <span class="string">"00002A28-0000-1000-8000-00805f9b34fb"</span>;</span><br><span class="line">BluetoothGattCharacteristic softwareVerCharacteristic = <span class="keyword">new</span> BluetoothGattCharacteristic(</span><br><span class="line">                UUID.fromString(SOFTWARE_REVISION_STRING),</span><br><span class="line">                BluetoothGattCharacteristic.PROPERTY_READ,</span><br><span class="line">                BluetoothGattCharacteristic.PERMISSION_READ</span><br><span class="line">        );</span><br></pre></td></tr></table></figure>
<h4 id="3-new__u4E00_u4E2A_u670D_u52A1"><a href="#3-new__u4E00_u4E2A_u670D_u52A1" class="headerlink" title="3.new 一个服务"></a>3.new 一个服务</h4><p>定义一个Service UUID，并new一个服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String SERVICE_DEVICE_INFORMATION = <span class="string">"0000180a-0000-1000-8000-00805f9b34fb"</span>;</span><br><span class="line">BluetoothGattService deviceInfoService = <span class="keyword">new</span> BluetoothGattService(</span><br><span class="line">                UUID.fromString(SERVICE_DEVICE_INFORMATION),</span><br><span class="line">                BluetoothGattService.SERVICE_TYPE_PRIMARY);</span><br></pre></td></tr></table></figure>
<h4 id="4-_u7ED9_u7279_u5F81_u8BBE_u4E00_u4E2A_u503C"><a href="#4-_u7ED9_u7279_u5F81_u8BBE_u4E00_u4E2A_u503C" class="headerlink" title="4.给特征设一个值"></a>4.给特征设一个值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">softwareVerCharacteristic.setValue(<span class="keyword">new</span> String(<span class="string">"0.0.1"</span>).getBytes());</span><br></pre></td></tr></table></figure>
<h4 id="5-_u628A_u7279_u5F81_u6DFB_u52A0_u5230_u670D_u52A1"><a href="#5-_u628A_u7279_u5F81_u6DFB_u52A0_u5230_u670D_u52A1" class="headerlink" title="5.把特征添加到服务"></a>5.把特征添加到服务</h4><p>将上面定义好的特征添加到服务中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deviceInfoService.addCharacteristic(softwareVerCharacteristic);</span><br></pre></td></tr></table></figure>
<h4 id="6-_u914D_u7F6E_u5E7F_u64AD"><a href="#6-_u914D_u7F6E_u5E7F_u64AD" class="headerlink" title="6.配置广播"></a>6.配置广播</h4><p>定义广播名称以及使之可被搜索到等等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AdvertiseSettings.Builder settingBuilder;</span><br><span class="line">settingBuilder = <span class="keyword">new</span> AdvertiseSettings.Builder();</span><br><span class="line">        settingBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY);</span><br><span class="line">settingBuilder.setConnectable(<span class="keyword">true</span>);</span><br><span class="line">        settingBuilder.setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH);</span><br><span class="line"></span><br><span class="line">AdvertiseData.Builder advBuilder;</span><br><span class="line"></span><br><span class="line">advBuilder = <span class="keyword">new</span> AdvertiseData.Builder();</span><br><span class="line"></span><br><span class="line">mAdapter.setName(<span class="string">"Peripheral"</span>); <span class="comment">//8 characters works, 9+ fails</span></span><br><span class="line">advBuilder.setIncludeDeviceName(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h4 id="7-_u6253_u5F00_u5468_u8FB9_u53CA_u76D1_u542C_u56DE_u8C03"><a href="#7-_u6253_u5F00_u5468_u8FB9_u53CA_u76D1_u542C_u56DE_u8C03" class="headerlink" title="7.打开周边及监听回调"></a>7.打开周边及监听回调</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">BluetoothGattServer  mGattServer;</span><br><span class="line">mGattServer = mManager.openGattServer(mContext, mGattServerCallback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattServerCallback mGattServerCallback</span><br><span class="line">            = <span class="keyword">new</span> BluetoothGattServerCallback()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> status, <span class="keyword">int</span> newState)</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"Our gatt server connection state changed, new state "</span>);</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, Integer.toString(newState));</span><br><span class="line">            <span class="keyword">super</span>.onConnectionStateChange(device, status, newState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceAdded</span><span class="params">(<span class="keyword">int</span> status, BluetoothGattService service)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"Our gatt server service was added."</span>);</span><br><span class="line">            <span class="keyword">super</span>.onServiceAdded(status, service);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicReadRequest</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> requestId, <span class="keyword">int</span> offset, BluetoothGattCharacteristic characteristic)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"Our gatt characteristic was read."</span>);</span><br><span class="line">            <span class="keyword">super</span>.onCharacteristicReadRequest(device, requestId, offset, characteristic);</span><br><span class="line">            mGattServer.sendResponse(device, requestId, BluetoothGatt.GATT_SUCCESS, offset,</span><br><span class="line">                    characteristic.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicWriteRequest</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> requestId, BluetoothGattCharacteristic characteristic, <span class="keyword">boolean</span> preparedWrite, <span class="keyword">boolean</span> responseNeeded, <span class="keyword">int</span> offset, <span class="keyword">byte</span>[] value)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"We have received a write request for one of our hosted characteristics"</span>);</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"data = "</span>+ value.toString());</span><br><span class="line">            <span class="keyword">super</span>.onCharacteristicWriteRequest(device, requestId, characteristic, preparedWrite, responseNeeded, offset, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationSent</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> status)</span></span><br><span class="line">        </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"onNotificationSent"</span>);</span><br><span class="line">            <span class="keyword">super</span>.onNotificationSent(device, status);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDescriptorReadRequest</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> requestId, <span class="keyword">int</span> offset, BluetoothGattDescriptor descriptor)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"Our gatt server descriptor was read."</span>);</span><br><span class="line">            <span class="keyword">super</span>.onDescriptorReadRequest(device, requestId, offset, descriptor);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDescriptorWriteRequest</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> requestId, BluetoothGattDescriptor descriptor, <span class="keyword">boolean</span> preparedWrite, <span class="keyword">boolean</span> responseNeeded, <span class="keyword">int</span> offset, <span class="keyword">byte</span>[] value)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"Our gatt server descriptor was written."</span>);</span><br><span class="line">            <span class="keyword">super</span>.onDescriptorWriteRequest(device, requestId, descriptor, preparedWrite, responseNeeded, offset, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExecuteWrite</span><span class="params">(BluetoothDevice device, <span class="keyword">int</span> requestId, <span class="keyword">boolean</span> execute)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">"GattServer"</span>, <span class="string">"Our gatt server on execute write."</span>);</span><br><span class="line">            <span class="keyword">super</span>.onExecuteWrite(device, requestId, execute);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h4 id="8-_u6DFB_u52A0_u670D_u52A1_u5230_u5468_u8FB9server"><a href="#8-_u6DFB_u52A0_u670D_u52A1_u5230_u5468_u8FB9server" class="headerlink" title="8.添加服务到周边server"></a>8.添加服务到周边server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gattServer.addService(deviceInfoService);</span><br></pre></td></tr></table></figure>
<h4 id="9-_u5F00_u542F_u5E7F_u64AD"><a href="#9-_u5F00_u542F_u5E7F_u64AD" class="headerlink" title="9.开启广播"></a>9.开启广播</h4><p>开启Service广播以及监听回调。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mLeAdvertiser.startAdvertising(settingBuilder.build(),</span><br><span class="line">advBuilder.build(), mAdvCallback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AdvertiseCallback mAdvCallback = <span class="keyword">new</span> AdvertiseCallback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartFailure</span><span class="params">(<span class="keyword">int</span> errorCode)</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"advertise"</span>,<span class="string">"onStartFailure"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartSuccess</span><span class="params">(AdvertiseSettings settingsInEffect)</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"advertise"</span>,<span class="string">"onStartSuccess"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h4 id="10-_u505C_u6B62_u5E7F_u64AD"><a href="#10-_u505C_u6B62_u5E7F_u64AD" class="headerlink" title="10.停止广播"></a>10.停止广播</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mLeAdvertiser.stopAdvertising(mAdvCallback);</span><br></pre></td></tr></table></figure>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>以上是实现一个BLE periphery的过程，BLE是通过Service以及Characteristic来传输数据的，每一个Service、Characteristic都有唯一的UUID来标识，数据是放在Characteristic中来传输的，BLE协议还规定，每个Characteristic的数据长度不能超过20个字节，超过的可做分包发送处理。</p>
<p>以上实现代码Github仓库地址：<a href="https://github.com/Llooper/BLEPeripheral" target="_blank" rel="external">Github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android蓝牙4.0的BLE协议中，有两个角色，一个是中心（<code>Central</code>），一个是周边（<code>Periphery</code>）。本篇主要介绍BLE periphery的实现过程，BLE的介绍以及central的实现另外的篇幅再介绍。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
      <category term="BLE" scheme="flintli.xyz/tags/BLE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android so库对应的源码路径列表]]></title>
    <link href="flintli.xyz/2016/06/15/Android-so-file-path/"/>
    <id>flintli.xyz/2016/06/15/Android-so-file-path/</id>
    <published>2016-06-15T07:54:34.000Z</published>
    <updated>2016-06-15T08:19:20.000Z</updated>
    <content type="html"><![CDATA[<p>对于Android系统开发人员而言，对源码进行修改再也正常不过。但是有时候需要改动一些so库的代码，找到对应的源码是一件比较麻烦的事，现列出一些so库对应的源码路径，以便之后查找方便。</p>
<a id="more"></a>
<blockquote>
<p>libandroid.so——frameworks/base/native/android<br>libandroid_runtime.so——frameworks/base/core/jni<br>libhwui.so——frameworks/base/libs/hwui<br>libstagefright_foundation.so——frameworks/av/media/libstagefright/foundation<br>libmedia_native.so——frameworks/av/media/libmedia_native<br>libmedia.so——frameworks/av/media/libmedia<br>libcamera_client.so——frameworks/av/camera<br>libbinder.so——frameworks/native/libs/binder<br>libcpustats.so——frameworks/native/libs/cpustats<br>libETC1.so——frameworks/native/opengl/libs<br>libgui.so——frameworks/native/libs/gui<br>libGLESv1_CM.so——frameworks/native/opengl/libs<br>libui.so——frameworks/native/libs/ui<br>libutils.so——frameworks/native/libs/utils<br>libstagefright_foundation.so——frameworks/av/media/libstagefright/foundation<br>libemoji.so——frameworks/opt/emoji<br>libaudioutils.so——system/media/audio_utils<br>libbluedroid.so——system/bluetooth/bluedroid<br>libcorkscrew.so——system/core/libcorkscrew<br>libcutils.so——system/core/libcutils<br>libnetutils.so——system/core/libnetutils<br>libusbhost.so——system/core/libusbhost<br>libssl.so——external/openssl<br>libstlport.so——external/stlport<br>libspeexresampler——external/speex<br>libsonivox.so——external/sonivox<br>libjpeg.so——external/jpeg<br>libcrypto.so——external/openssl<br>libcutils.so——system/core/libcutils<br>libdbus.so——external/dbus/dbus<br>libharfbuzz.so——external/harfbuzz<br>libgccdemangle——external/gcc-demangle<br>libhardware_legacy.so——hardware/libhardware_legacy<br>libgabi++.so——abi/cpp<br>libdvm.so——dalvik/vm<br>libc.so——bionic/libc        </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于Android系统开发人员而言，对源码进行修改再也正常不过。但是有时候需要改动一些so库的代码，找到对应的源码是一件比较麻烦的事，现列出一些so库对应的源码路径，以便之后查找方便。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开机声音实现]]></title>
    <link href="flintli.xyz/2016/06/08/Android-boot-sound/"/>
    <id>flintli.xyz/2016/06/08/Android-boot-sound/</id>
    <published>2016-06-08T07:21:06.000Z</published>
    <updated>2016-06-14T08:00:55.000Z</updated>
    <content type="html"><![CDATA[<p>本篇主要介绍自定义Android开机声音，系统版本 4.4。</p>
<a id="more"></a>
<h3 id="u9700_u6C42"><a href="#u9700_u6C42" class="headerlink" title="需求"></a>需求</h3><p>增加系统开机声音，跟随开机动画播放一起播放。</p>
<h3 id="u6587_u4EF6_u4F4D_u7F6E"><a href="#u6587_u4EF6_u4F4D_u7F6E" class="headerlink" title="文件位置"></a>文件位置</h3><h3 id="u5B9E_u73B0_u65B9_u5F0F"><a href="#u5B9E_u73B0_u65B9_u5F0F" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="u5DF2_u6709_u65B9_u5F0F"><a href="#u5DF2_u6709_u65B9_u5F0F" class="headerlink" title="已有方式"></a>已有方式</h4><h4 id="u5F53_u524D_u65B9_u5F0F"><a href="#u5F53_u524D_u65B9_u5F0F" class="headerlink" title="当前方式"></a>当前方式</h4><h3 id="u5B9E_u73B0_u539F_u7406"><a href="#u5B9E_u73B0_u539F_u7406" class="headerlink" title="实现原理"></a>实现原理</h3><h3 id="u6CE8_u610F_u4E8B_u9879"><a href="#u6CE8_u610F_u4E8B_u9879" class="headerlink" title="注意事项"></a>注意事项</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>本篇主要介绍自定义Android开机声音，系统版本 4.4。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[输出 Android kernel log]]></title>
    <link href="flintli.xyz/2016/06/08/Android-kernel-log/"/>
    <id>flintli.xyz/2016/06/08/Android-kernel-log/</id>
    <published>2016-06-08T07:18:41.000Z</published>
    <updated>2016-06-08T07:20:37.000Z</updated>
    <content type="html"><![CDATA[<p>adb shell cat proc/kmsg &gt; kernel.txt</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>adb shell cat proc/kmsg &gt; kernel.txt</p>
]]>
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android has leaked window 分析]]></title>
    <link href="flintli.xyz/2016/06/03/android-has-leaked-window/"/>
    <id>flintli.xyz/2016/06/03/android-has-leaked-window/</id>
    <published>2016-06-03T06:30:44.000Z</published>
    <updated>2016-06-03T06:32:31.000Z</updated>
    <content type="html"><![CDATA[<p>XXX Activity has leaked window分析。</p>
<a id="more"></a>
<h3 id="leaked_window__u5206_u6790"><a href="#leaked_window__u5206_u6790" class="headerlink" title="leaked window 分析"></a>leaked window 分析</h3><p>Monkey测试xos过程中，出了很多leaked window的问题，现针对其中一个进行分析，作为例子参考。部分具体log如下，其余log在附件leak_window.txt中：</p>
<blockquote>
<p>android.view.WindowLeaked: Activity systems.xos.car.android.traficreport.MainActivity has leaked window com.android.internal.policy.impl.PhoneWindow$DecorView{41c6ee48 V.E….. ……ID 0,0-624,480} that was originally added here</p>
</blockquote>
<p>分析出错log，发现问题出在于</p>
<blockquote>
<p>E/WindowManager(  987):     at android.app.Activity.openOptionsMenu(Activity.java:2873)<br>E/WindowManager(  987):     at systems.xos.car.android.traficreport.MainActivity$4.run(MainActivity.java:227)</p>
</blockquote>
<p>顺着提示查看了MainActivity.java:227行的代码，为 </p>
<pre><code>new Handler().postDelayed(new Runnable() {
       @Override
       public void run() {
           openOptionsMenu();
       }
   }, 200);
</code></pre><p>看到了<code>openOptionsMenu()</code>，且在onResume中调用，猜测可能是由于<code>OptionsMenu</code>引起。继续往上分析log，查找导致出现泄漏的问题。在log日志的<code>188</code>行发现了一个输出日志<br><code>01-01 08:01:25.550 D/MainActivity(  987): onOptionsMenuClosed</code><br>此为调用了下函数的输出      </p>
<pre><code>@Override
public void onOptionsMenuClosed(Menu menu) {
    Log.d(&quot;MainActivity&quot;,&quot;onOptionsMenuClosed&quot;);
    super.onOptionsMenuClosed(menu);
    moveTaskToBack(true);
}
</code></pre><p>继续往上分析log，发现MainActivity start之后基本没做什么操作，也无其他异常，基本可以确定 leaked window为OptionsMenu引起的问题。接着对照盒子上的电子狗app进行一次同样的操作，即打开app，出现了OptionsMenu，然后退出。未发现问题。<br>继续分析代码，发现 <code>openOptionsMenu()</code>有200ms的延迟，猜测可能为monkey点击速度比人为操作快好几倍。</p>
<blockquote>
<p>打开app，还未openOptionsMenu便退出了app，导致了leaked window。</p>
</blockquote>
<p>分析log日志，发现了在<code>onOptionsMenuClosed</code>之前的第76以及其他几行存在：</p>
<pre><code>D/MainActivity(  987): KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=85698, downTime=85698, deviceId=-1, source=0x101 }   
</code></pre><p>即monkey执行了 keyCode=KEYCODE_BACK 操作退出了app，然后输出closed。但是延迟了200ms才<code>openOptionsMenu()</code>，此时MainActivity已被destroy，OptionsMenu无挂载窗口，导致了leaked window。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>XXX Activity has leaked window分析。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 系统崩溃日志收集上传]]></title>
    <link href="flintli.xyz/2016/05/19/Android-upload-dropbox-error/"/>
    <id>flintli.xyz/2016/05/19/Android-upload-dropbox-error/</id>
    <published>2016-05-19T03:53:29.000Z</published>
    <updated>2016-06-03T06:13:54.000Z</updated>
    <content type="html"><![CDATA[<p>Android系统日志收集与上传。</p>
<a id="more"></a>
<h2 id="Android_u7CFB_u7EDF_u65E5_u5FD7_u6536_u96C6_u4E0E_u4E0A_u4F20"><a href="#Android_u7CFB_u7EDF_u65E5_u5FD7_u6536_u96C6_u4E0E_u4E0A_u4F20" class="headerlink" title="Android系统日志收集与上传"></a>Android系统日志收集与上传</h2><blockquote>
<p>需求： 收集系统crash、anr等日志，并上传到服务器。<br>实现： 利用DropBoxManager持续化存储系统数据的机制，取得dropbox的日志文件并上传。</p>
</blockquote>
<h3 id="DropBoxManager_u7B80_u4ECB"><a href="#DropBoxManager_u7B80_u4ECB" class="headerlink" title="DropBoxManager简介"></a>DropBoxManager简介</h3><p>对DropBoxManager进行简单的介绍。</p>
<h4 id="u7CFB_u7EDF_u9519_u8BEF_u7C7B_u578BTAG"><a href="#u7CFB_u7EDF_u9519_u8BEF_u7C7B_u578BTAG" class="headerlink" title="系统错误类型TAG"></a>系统错误类型TAG</h4><ul>
<li><code>crash</code></li>
<li><code>anr</code></li>
<li><code>wtf</code></li>
<li><code>strict_mode</code></li>
<li><code>lowmem</code></li>
<li><code>watchdog</code></li>
<li><code>netstats_error</code></li>
<li><code>SYSTEM_TOMBSTONE</code></li>
<li><code>BATTERY_DISCHARGE_INFO</code></li>
</ul>
<p>以上是分析源码得出的DropBoxManager系统错误类型。</p>
<h4 id="u6587_u4EF6_u5B58_u50A8"><a href="#u6587_u4EF6_u5B58_u50A8" class="headerlink" title="文件存储"></a>文件存储</h4><p>DropBoxManager 使用的是文件存储, 所有的记录都存储在 /data/system/dropbox 目录中, 一条记录就是一个文件, 当文本文件的尺寸超过文件系统的最小区块尺寸后, DropBoxManager 还会自动压缩该文件, 通常文件名以调用 DropBoxManager 的 TAG 参数开头。</p>
<h4 id="u4F7F_u7528DropBoxManager"><a href="#u4F7F_u7528DropBoxManager" class="headerlink" title="使用DropBoxManager"></a>使用DropBoxManager</h4><p>每当DropBoxManager生成新的记录, 就会广播一个 <code>DropBoxManager.ACTION_DROPBOX_ENTRY_ADDED</code> Intent，日志收集系统只需接收广播，然后去读取文件，上传到服务器即可。<br>下面给出具体的代码示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BroadcastReceiver BugReportReveiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DropBoxManager.ACTION_DROPBOX_ENTRY_ADDED.equals(intent.getAction())) &#123;</span><br><span class="line">               tag = intent.getExtras().getString(DropBoxManager.EXTRA_TAG);</span><br><span class="line">               time = intent.getExtras().getLong(DropBoxManager.EXTRA_TIME);</span><br><span class="line">               Log.d(TAG, <span class="string">"BugReportReveiver onReceive..."</span>);</span><br><span class="line">               Log.d(TAG, <span class="string">"tag :"</span> + tag + <span class="string">"----- time :"</span> + time);</span><br><span class="line"></span><br><span class="line">               file = selectFile(getTagtype(tag)); <span class="comment">//getFile</span></span><br><span class="line">               sendErrorFileToserver(); <span class="comment">//upload</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> File <span class="title">selectFile</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">       String fileName = <span class="keyword">null</span>;</span><br><span class="line">       String path = <span class="string">"data/system/dropbox/"</span>;</span><br><span class="line">       <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               fileName = path + tag + <span class="string">"@"</span> + time + <span class="string">".txt"</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               fileName = path + tag + <span class="string">"@"</span> + time + <span class="string">".txt.gz"</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">       <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] arr_tag = &#123;<span class="string">"system_app_crash"</span>,</span><br><span class="line">           <span class="string">"system_server_wtf"</span>,<span class="string">"system_app_anr"</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getTagtype</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> iter = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (; iter &lt; arr_tag.length; iter++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arr_tag[iter].equals(tag)) &#123;</span><br><span class="line">               <span class="keyword">return</span> iter;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android系统日志收集与上传。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[happy birthday]]></title>
    <link href="flintli.xyz/2016/05/19/happy-birthday/"/>
    <id>flintli.xyz/2016/05/19/happy-birthday/</id>
    <published>2016-05-18T16:00:00.000Z</published>
    <updated>2016-06-03T06:14:09.000Z</updated>
    <content type="html"><![CDATA[<p>又是一年，生日快乐！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>又是一年，生日快乐！</p>
]]>
    </summary>
    
      <category term="随笔" scheme="flintli.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[怎么替换AOSP默认的签名key]]></title>
    <link href="flintli.xyz/2016/05/18/Android-replace-the-key-int-the-aosp/"/>
    <id>flintli.xyz/2016/05/18/Android-replace-the-key-int-the-aosp/</id>
    <published>2016-05-18T07:53:08.000Z</published>
    <updated>2016-06-20T09:31:50.000Z</updated>
    <content type="html"><![CDATA[<p>本篇主要介绍aosp的key类型，以及如何替换AOSP原有签名key，生成自定义的key并对系统签名。</p>
<a id="more"></a>
<h3 id="u7B7E_u540D_u7C7B_u578B"><a href="#u7B7E_u540D_u7C7B_u578B" class="headerlink" title="签名类型"></a>签名类型</h3><p>Android的标准签名key文件位于<code>/build/target/product/security</code>目录下，主要有4个key，分别为：</p>
<ul>
<li><strong><code>testkey</code></strong>：普通签名APK，默认情况下使用。</li>
<li><strong><code>platform</code></strong>：该签名APK完成一些系统的核心。</li>
<li><strong><code>shared</code></strong>：该签名APK需要和home/contacts进程共享数据。</li>
<li><strong><code>media</code></strong>：使用android.media作为共享UID的APK签名。</li>
</ul>
<p>其中 <code>*.pk8</code>代表私钥，<code>*.x509.pem</code>公钥，一定是成对出现的。<br>testkey是作为android编译的时候默认的签名key，如果系统中的apk的Android.mk中没有设置<strong><code>LOCAL_CERTIFICATE</code></strong>的值，就默认使用<strong><code>testkey</code></strong>。    </p>
<p>而如果设置成：<br><strong><code>LOCAL_CERTIFICATE := platform</code></strong><br>就代表使用platform来签名，这样的话这个apk就拥有了和system相同的签名，因为系统级别的签名也是使用的platform来签名，此时使用<code>android:sharedUserId=&quot;android.uid.system&quot;</code>才有用！</p>
<h3 id="u81EA_u5B9A_u4E49_u7B7E_u540Dkey"><a href="#u81EA_u5B9A_u4E49_u7B7E_u540Dkey" class="headerlink" title="自定义签名key"></a>自定义签名key</h3><h4 id="key_u751F_u6210_u4ECB_u7ECD"><a href="#key_u751F_u6210_u4ECB_u7ECD" class="headerlink" title="key生成介绍"></a>key生成介绍</h4><p>在<code>/build/target/product/security</code>目录下有个README，里面说明了怎么制作这些key以及使用问题（android4.4）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">The following commands were used to generate the test key pairs:</span><br><span class="line"></span><br><span class="line">  development/tools/make_key testkey  <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line">  development/tools/make_key platform <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line">  development/tools/make_key shared   <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line">  development/tools/make_key media    <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line"></span><br><span class="line">The following standard test keys are currently included:</span><br><span class="line"></span><br><span class="line">testkey -- a generic key <span class="keyword">for</span> packages that do not otherwise specify a key.</span><br><span class="line">platform -- a test key <span class="keyword">for</span> packages that are part of the core platform.</span><br><span class="line">shared -- a test key <span class="keyword">for</span> things that are shared in the home/contacts process.</span><br><span class="line">media -- a test key <span class="keyword">for</span> packages that are part of the media/download system.</span><br><span class="line"></span><br><span class="line">These test keys are used strictly in development, and should never be assumed</span><br><span class="line">to convey any sort of validity.  When $BUILD_SECURE=<span class="keyword">true</span>, the code should not</span><br><span class="line">honor these keys in any context.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">signing using the openssl <span class="title">commandline</span> <span class="params">(<span class="keyword">for</span> boot/system images)</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1. convert pk8 format key to pem format</span><br><span class="line">   % openssl pkcs8 -inform DER -nocrypt -in testkey.pk8 -out testkey.pem</span><br><span class="line"></span><br><span class="line">2. create a signature using the pem format key</span><br><span class="line">   % openssl dgst -binary -sha1 -sign testkey.pem FILE &gt; FILE.sig</span><br><span class="line"></span><br><span class="line">extracting <span class="keyword">public</span> keys <span class="keyword">for</span> embedding</span><br><span class="line">------------------------------------</span><br><span class="line">it's a Java tool</span><br><span class="line">but it generates C code</span><br><span class="line">take a look at commands/recovery/Android.mk</span><br><span class="line">you'll see it running $<span class="params">(HOST_OUT_JAVA_LIBRARIES)</span>/dumpkey.jar</span></span><br></pre></td></tr></table></figure>
<p>从README可知，key是通过<code>development/tools</code>目录下的<code>make_key</code>脚本生成的，脚本需要传入两个参数。其中第一个参数是key的名字，我们可以不修改，使用aosp默认的4个key的名字；第二个参数即是具体的一些属性，此为key真正的关键（我们需要修改的部分），下面对第二个参数的一些具体属性做出分析解释：</p>
<blockquote>
<p>C —&gt; Country Name (2 letter code)<br>ST —&gt; State or Province Name (full name)<br>L —&gt; Locality Name (eg, city)<br>O —&gt; Organization Name (eg, company)<br>OU —&gt; Organizational Unit Name (eg, section)<br>CN —&gt; Common Name (eg, your name or your server’s hostname)<br>emailAddress —&gt; Contact email address</p>
</blockquote>
<p>另外在是用<code>make_key</code>生成key的过程中会提示输入password，一般是不输入，直接enter的。</p>
<h4 id="u5220_u9664_u5DF2_u5B58_u5728_u7684key"><a href="#u5220_u9664_u5DF2_u5B58_u5728_u7684key" class="headerlink" title="删除已存在的key"></a>删除已存在的key</h4><p>进入到<code>/build/target/product/security</code>目录执行如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ./*.p*</span><br></pre></td></tr></table></figure>
<p>删除全部已存在的key，然后重新生成新的key。</p>
<h4 id="u751F_u6210key"><a href="#u751F_u6210key" class="headerlink" title="生成key"></a>生成key</h4><p>返回到AOSP的根目录，使用<code>make_key</code>脚本去生成4个签名key。</p>
<h5 id="testkey"><a href="#testkey" class="headerlink" title="testkey"></a>testkey</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/testkey &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h5 id="media"><a href="#media" class="headerlink" title="media"></a>media</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/media &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h5 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/shared &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h5 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/platform &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h4 id="u9A8C_u8BC1key"><a href="#u9A8C_u8BC1key" class="headerlink" title="验证key"></a>验证key</h4><p>在生成4个key后，再使用<code>OpenSSL</code>的工具来验证一下生成的key是否正常。<br>进入到/build/target/product/security目录，执行如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -noout -subject -issuer -in media.x509.pem</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subject= /C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#10;issuer= /C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com</span><br></pre></td></tr></table></figure>
<p>另外3个key的验证类似media，就不再多做介绍。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -noout -subject -issuer -in shared.x509.pem&#10;openssl x509 -noout -subject -issuer -in platform.x509.pem&#10;openssl x509 -noout -subject -issuer -in testkey.x509.pem</span><br></pre></td></tr></table></figure>
<h4 id="u4FEE_u6539_u7CFB_u7EDF_u9ED8_u8BA4_u7B7E_u540Dkey"><a href="#u4FEE_u6539_u7CFB_u7EDF_u9ED8_u8BA4_u7B7E_u540Dkey" class="headerlink" title="修改系统默认签名key"></a>修改系统默认签名key</h4><p>在上面提到如果apk中的编译选项<code>LOCAL_CERTIFICATE</code>没有设置的话，就会使用默认的<code>testkey</code>作为签名key，我们可以修改成自己想要的key，按照上面的步骤制作一个<code>releasekey</code>，修改android配置在<code>/build/core/config.mk</code>中定义变量：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">DEFAULT_SYSTEM_DEV_CERTIFICATE</span> := build/target/product/security/testkey</span><br></pre></td></tr></table></figure>
<p>TO </p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">DEFAULT_SYSTEM_DEV_CERTIFICATE</span> := build/target/product/security/releasekey</span><br></pre></td></tr></table></figure>
<p>生成<code>testkey</code>的时候，原先<code>testkey</code>的名字换成<code>releasekey</code>，步骤都一样。</p>
<p><strong>PS：可以不用修改testkey的名字，这个不是很关键。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇主要介绍aosp的key类型，以及如何替换AOSP原有签名key，生成自定义的key并对系统签名。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android user版本编译]]></title>
    <link href="flintli.xyz/2016/05/16/Android-build-user/"/>
    <id>flintli.xyz/2016/05/16/Android-build-user/</id>
    <published>2016-05-16T12:16:02.000Z</published>
    <updated>2016-06-03T06:13:45.000Z</updated>
    <content type="html"><![CDATA[<p>怎么编译user版本的Android系统。</p>
<a id="more"></a>
<p>Android编译选项分别有3个，user，eng，userDebug。这3个选项分别对应的版本如下：</p>
<blockquote>
<p>eng：debug 版本<br>user: release 版本<br>userDebug版本：部分debug版本</p>
</blockquote>
<p>详细的介绍以及每个选项对应的功能权限在<a href="http://llooper.space/2016/05/11/Android-ADB%E7%8A%B6%E6%80%81%E5%BC%80%E5%85%B3/" target="_blank" rel="external">上一篇</a> 已经介绍过。</p>
<p>本篇主要介绍如何编译user版本（其他版本同理），以下全部代码都以rockchip作为示例。</p>
<ul>
<li><strong>修改脚本：</strong>user等编译选项主要由<code>device/rockchip/rkpx2/vendorsetup.sh</code>脚本进行控制。打开脚本找到<code>add_lunch_combo rkpx2-eng</code>项，将eng改为user。也即是<code>add_lunch_combo rkpx2-user</code>。</li>
<li><strong>加载脚本：</strong>脚本修改完成之后保存，要使其生效必须回到aosp根目录，执行如下<code>source build/envsetup.sh</code>使其加载进入makefile系统。</li>
<li><strong>选择user版本：</strong>加载完毕之后，还需选择user版本进行编译。使用<code>lunch</code>命令进行选择，在aosp根没目录执行<code>lunch</code>，然后选择<code>rkpx2-user</code>。</li>
<li><strong>make</strong></li>
</ul>
<p>执行make之后，可以看到输出日志，<code>TARGET_BUILD_VARIANT</code>对应的即是编译选项，<code>TARGET_BUILD_VARIANT=user</code>表明编译的是user版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>怎么编译user版本的Android系统。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android ADB 快关控制]]></title>
    <link href="flintli.xyz/2016/05/11/Android-ADB-control/"/>
    <id>flintli.xyz/2016/05/11/Android-ADB-control/</id>
    <published>2016-05-11T06:52:10.000Z</published>
    <updated>2016-06-20T09:29:06.000Z</updated>
    <content type="html"><![CDATA[<p>Android设备adb root权限控制以及 adb shell的开关控制。</p>
<a id="more"></a>
<h3 id="adb_root_u6743_u9650"><a href="#adb_root_u6743_u9650" class="headerlink" title="adb root权限"></a>adb root权限</h3><p>adb 的root权限是在system/core/adb/adb.c中控制。主要根据<code>ro.secure</code>以及 <code>ro.debuggable</code>等<code>system property</code> 来控制。默认即档ro.secure 为0 时，即开启root 权限，为1时再根据ro.debuggable等选项来确认是否可以用开启root 权限。</p>
<h3 id="user_eng__u7528_u6237_u7248_u672C_u5DEE_u5F02"><a href="#user_eng__u7528_u6237_u7248_u672C_u5DEE_u5F02" class="headerlink" title="user eng 用户版本差异"></a>user eng 用户版本差异</h3><p><code>ro.secure</code>以及<code>ro.debuggable</code>的值设置跟用户编译版本有关，一下是Google官方的描述。</p>
<p>When building for a particular product, it’s often useful to have minor variations on what is ultimately the final release build. These are the currently-defined “flavors” or “types” (we need to settle on a real name for these).</p>
<h4 id="eng"><a href="#eng" class="headerlink" title="eng"></a>eng</h4><p>This is the default flavor. A plain “make” is the same as “make eng”. droid is an alias for eng.</p>
<ul>
<li>Installs modules tagged with: eng, debug, shell_$(TARGET_SHELL), user, and/or development.</li>
<li>Installs non-APK modules that have no tags specified.<br>Installs APKs according to the product definition files, in addition to tagged APKs.</li>
<li>ro.secure=0</li>
<li>ro.debuggable=1</li>
<li>ro.kernel.android.checkjni=1</li>
<li>adb is enabled by default.</li>
</ul>
<h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p><code>make user</code></p>
<p>This is the flavor intended to be the final release bits.</p>
<ul>
<li>Installs modules tagged with shell_$(TARGET_SHELL) and user.</li>
<li>Installs non-APK modules that have no tags specified.</li>
<li>Installs APKs according to the product definition files; tags are ignored for APK modules.</li>
<li>ro.secure=1</li>
<li>ro.debuggable=0</li>
<li>adb is disabled by default.</li>
</ul>
<h4 id="userdebug"><a href="#userdebug" class="headerlink" title="userdebug"></a>userdebug</h4><p><code>make userdebug</code><br>The same as user, except:</p>
<ul>
<li>Also installs modules tagged with debug.</li>
<li>ro.debuggable=1</li>
<li>adb is enabled by default.</li>
</ul>
<h3 id="adb_shell"><a href="#adb_shell" class="headerlink" title="adb shell"></a>adb shell</h3><p>以上是adb root权限相关的介绍。下面介绍怎么禁用设备的adb，也即是使得 adb shell失效，无法进入。</p>
<h4 id="u521D_u6B65_u65B9_u6848_u5B9E_u73B0"><a href="#u521D_u6B65_u65B9_u6848_u5B9E_u73B0" class="headerlink" title="初步方案实现"></a>初步方案实现</h4><blockquote>
<p>经过一段时间资料查找，adb shell的开关状态跟usb端口有关。可以通过<code>getprop</code>获取系统相关参数查看usb以及adb的状态。</p>
</blockquote>
<p><code>adb shell getprop &gt; prop.txt</code>将系统property的读取并写入prop.txt。usb控制adb的相应参数如下：</p>
<blockquote>
<pre><code>`[sys.usb.config]: [mass_storage,adb]`
`[persist.sys.usb.config]: [mass_storage,adb]`
</code></pre></blockquote>
<p><code>sys.usb.config</code>为不可修改的，如果需要改动，只能去写<code>persist.sys.usb.config</code>的值。<br><code>adb shell setprop persist.sys.usb.config mass_storage,adb</code>的形式可以为<code>persist.sys.usb.config</code>赋值，需要关闭adb只需将 <code>mass_storage,adb</code>改为<code>mass_storage,none</code>即可。</p>
<p><strong>ps: 注意adb关闭（none）后需要重启才能生效。</strong></p>
<h5 id="u5F00_u542Fadb_uFF1A"><a href="#u5F00_u542Fadb_uFF1A" class="headerlink" title="开启adb："></a>开启adb：</h5><blockquote>
<p>adb shell setprop persist.sys.usb.config mass_storage,adb</p>
</blockquote>
<h5 id="u5173_u95EDadb_uFF1A"><a href="#u5173_u95EDadb_uFF1A" class="headerlink" title="关闭adb："></a>关闭adb：</h5><blockquote>
<p>adb shell setprop persist.sys.usb.config mass_storage,none<br>adb reboot</p>
</blockquote>
<p>上面给出的方法可以有效的对adb进行开启关闭，但有一个不足的，adb一但关闭就不可再开启。因为adb关闭之后就无法再进入<code>adb shell</code>对设备进行adb命令操作，需要谨慎操作。</p>
<h4 id="u4F18_u5316_u65B9_u6848"><a href="#u4F18_u5316_u65B9_u6848" class="headerlink" title="优化方案"></a>优化方案</h4><p>由于上面所述方式存在很大的不足，现针对方案进行优化。通过代码的方式，对adb进行开关控制。<br>写一个demo app，设置一个开关，对adb进行开关控制。</p>
<h5 id="u4EE3_u7801_u5F00_u542Fadb_uFF1A"><a href="#u4EE3_u7801_u5F00_u542Fadb_uFF1A" class="headerlink" title="代码开启adb："></a>代码开启adb：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemProperties.set(<span class="string">"persist.sys.usb.config"</span>, <span class="string">"mass_storage,adb"</span>);</span><br></pre></td></tr></table></figure>
<h5 id="u4EE3_u7801_u5173_u95EDadb_uFF1A"><a href="#u4EE3_u7801_u5173_u95EDadb_uFF1A" class="headerlink" title="代码关闭adb："></a>代码关闭adb：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemProperties.set(<span class="string">"persist.sys.usb.config"</span>, <span class="string">"mass_storage,none"</span>);</span><br></pre></td></tr></table></figure>
<p>代码关闭adb之后仍需重启系统才能生效，附带上重启系统的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rebootSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"rebootSystem"</span>);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_REBOOT);</span><br><span class="line">        intent.putExtra(<span class="string">"nowait"</span>, <span class="number">1</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"interval"</span>, <span class="number">1</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"window"</span>, <span class="number">0</span>);</span><br><span class="line">        mContext.sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>SystemProperties</code>类不对外开放，是Android的隐藏类，该app需要将源码放到aosp中去编译生成镜像再烧录。还需要注意的是，该app需要取得系统核心权限，AndroidManifest.xml中添加<br><code>android:sharedUserId=&quot;android.uid.system&quot;</code>，Android.mk申请<code>platform</code>权限，<code>LOCAL_CERTIFICATE := platform</code>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android设备adb root权限控制以及 adb shell的开关控制。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Andorid error ' *.jar odex has stale dependencies' 解决方案]]></title>
    <link href="flintli.xyz/2016/05/10/Android-error-jar-odex-has-stale-dependencies/"/>
    <id>flintli.xyz/2016/05/10/Android-error-jar-odex-has-stale-dependencies/</id>
    <published>2016-05-10T12:55:02.000Z</published>
    <updated>2016-06-20T09:35:32.000Z</updated>
    <content type="html"><![CDATA[<p>修改Android系统签名过程遇到的问题以及解决方法，主要是签名修改之后，编译烧录之后的img报了 <code>*.jar odex has stale dependencies</code>的错误。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I/dalvikvm(  <span class="number">621</span>): DexOpt: Some deps went away</span><br><span class="line">E/dalvikvm(  <span class="number">621</span>): /system/framework/android.policy.jar odex has stale dependencies</span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): Zip is good, but no classes.dex inside, and no valid .odex file in the same directory</span><br><span class="line">D/dalvikvm(  <span class="number">621</span>): Unable to process classpath element <span class="string">'/system/framework/android.policy.jar'</span></span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): DexOpt: Some deps went away</span><br><span class="line">E/dalvikvm(  <span class="number">621</span>): /system/framework/services.jar odex has stale dependencies</span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): Zip is good, but no classes.dex inside, and no valid .odex file in the same directory</span><br><span class="line">D/dalvikvm(  <span class="number">621</span>): Unable to process classpath element <span class="string">'/system/framework/services.jar'</span></span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): DexOpt: Some deps went away</span><br><span class="line">E/dalvikvm(  <span class="number">621</span>): /system/framework/apache-xml.jar odex has stale dependencies</span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): Zip is good, but no classes.dex inside, and no valid .odex file in the same directory</span><br><span class="line">D/dalvikvm(  <span class="number">621</span>): Unable to process classpath element <span class="string">'/system/framework/apache-xml.jar'</span></span><br></pre></td></tr></table></figure>
<p>主要错误情况如上所示，表现为 jar包 odex has stale dependencies。经过网上查找资料以及分析之后得出结论。<br>原因是<code>build/core/dex_preopt.mk</code>里面的宏<code>DEXPREOPT_BOOT_JARS</code>和<code>init.rc</code>里面的宏BOOTCLASSPATH所赋值的包的位置不一样，把它们对应起来就解决了。</p>
<p>上面<code>DEXPREOPT_BOOT_JARS</code>不一定定义在<code>dex_preopt.mk</code>文件中，需要根据你当前的系统进行分析。主要找准了 <code>DEXPREOPT_BOOT_JARS</code>定义的位置，以及 <code>init.rc</code>中的位置，<code>init.rc</code>中的<code>DEXPREOPT_BOOT_JARS</code>也有可能在<code>init.environment.rc</code>中。将俩边的jar包的顺序以及文件名称对应上就可以。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>修改Android系统签名过程遇到的问题以及解决方法，主要是签名修改之后，编译烧录之后的img报了 <code>*.jar odex has stale dependencies</code>的错误。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android ActivityManager MOVE_TASK_WITH_HOME属性说明]]></title>
    <link href="flintli.xyz/2016/05/10/Android-ActivityManager-MOVE-TASK-WITH-HOME/"/>
    <id>flintli.xyz/2016/05/10/Android-ActivityManager-MOVE-TASK-WITH-HOME/</id>
    <published>2016-05-10T12:43:06.000Z</published>
    <updated>2016-06-20T09:28:29.000Z</updated>
    <content type="html"><![CDATA[<p>ActivityManager的flag MOVE_TASK_WITH_HOME分析</p>
<a id="more"></a>
<p><code>MOVE_TASK_WITH_HOME</code>作为一个flag定义于ActivityManager中。主要是做为<code>moveTaskToFront()</code>的一个参数。</p>
<p>/**   </p>
<ul>
<li>Flag for {@link #moveTaskToFront(int, int)}: also move the “home”   </li>
<li>activity along with the task, so it is positioned immediately behind   </li>
<li><p>the task.<br>*/</p>
<p>   public static final int MOVE_TASK_WITH_HOME = 0x00000001;</p>
</li>
</ul>
<p>从命名跟代码中的注释就可以了解到，设置了这个flag，那么在将这个task移到栈的顶部时，home的task也要相应的往上移动，移到顶部task的下面。</p>
<p>那么当设置了这个flag的task移到栈的顶部后，栈中task的顺序应该如下：</p>
<table>
<thead>
<tr>
<th>task</th>
</tr>
</thead>
<tbody>
<tr>
<td>home</td>
</tr>
<tr>
<td>task1</td>
</tr>
<tr>
<td>…….</td>
</tr>
</tbody>
</table>
<p>task has flag <code>MOVE_TASK_WITH_HOME</code></p>
<p>那么在按back键时，task退出，home在task之下，应该resume home。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ActivityManager的flag MOVE_TASK_WITH_HOME分析</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AOSP SystemUI之RecentsApp篇（一）]]></title>
    <link href="flintli.xyz/2016/03/16/Android-systemui-recents-1/"/>
    <id>flintli.xyz/2016/03/16/Android-systemui-recents-1/</id>
    <published>2016-03-16T14:35:19.000Z</published>
    <updated>2016-06-20T09:36:10.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本篇主要介绍systemui的主要组成部分RecentsApp也就是最近任务列表的启动流程。</p>
</blockquote>
<a id="more"></a>
<p>下面主要涉及到的文件的路径汇总：<br><code>framework/base/services/input/InputReader.cpp</code><br><code>framework/base/services/input/InputDispatcher.cpp</code><br><code>framework/base/services/java/com/android/server/input/InputManagerService.java</code><br><code>framework/base/services/java/com/android/server/am/ActivityManagerService.java</code><br><code>framework/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java</code><br><code>framework/base/services/java/com/android/sever/StatusBarManagerService.java</code><br><code>framework/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java</code>    </p>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>本篇主要介绍RecentsApp的俩种启动方式，风别为：<br>1) <code>adb shell input keyevent KEYCODE_APP_SWITCH</code><br>2) <code>NavigationBar</code>   </p>
<h3 id="adb_u542F_u52A8"><a href="#adb_u542F_u52A8" class="headerlink" title="adb启动"></a>adb启动</h3><h4 id="u8F93_u5165_u6D41_u7A0B"><a href="#u8F93_u5165_u6D41_u7A0B" class="headerlink" title="输入流程"></a>输入流程</h4><p>先从adb启动介绍开始。Android的keyevent的输入事件在此就不过多介绍，简要的过一下流程。先是发送某一个KeyEvent，<code>InputReader.cpp</code>读取输入事件，交给<code>InputDispatcher.cpp</code>，它负责事件的处理以及分发。然后转交给Java framework层的<code>IMS</code>，<code>IMS</code>处理过后转交给<code>AMS</code>，<code>AMS</code>继续往上层传递到<code>PhoneWindowManager</code>，这是一个Android framework层中一个极其重要的类，它管理着Android全部窗口策略，以及按键事件的分发处理。</p>
<h4 id="PhoneWindowManager"><a href="#PhoneWindowManager" class="headerlink" title="PhoneWindowManager"></a>PhoneWindowManager</h4><p><code>PhoneWindowManager.java</code>接收到<code>KEYCODE_APP_SWITCH</code>事件后做了如下操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_APP_SWITCH) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!keyguardOn) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (down &amp;&amp; repeatCount == <span class="number">0</span>) &#123;</span><br><span class="line">			preloadRecentApps();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!down) &#123;</span><br><span class="line">			toggleRecentApps();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>keyguardOn</code>是用来判断当前是否处于锁屏状态，从上边的if块中明显可以看出，<code>KEYCODE_APP_SWITCH</code> down的时候调用了<code>preloadRecentApps()</code>，up的时候调用了<code>toggleRecentApps()</code>，顺序显然是先preload再toggle。<br>转去分析这俩个函数，看看分别做了什么操作，它们的实现同样位于<code>PhoneWindowManager</code>中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preloadRecentApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mPreloadedRecentApps = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           IStatusBarService statusbar = getStatusBarService();</span><br><span class="line">           <span class="keyword">if</span> (statusbar != <span class="keyword">null</span>) &#123;</span><br><span class="line">               statusbar.preloadRecentApps();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">           Slog.e(TAG, <span class="string">"RemoteException when preloading recent apps"</span>, e);</span><br><span class="line">           <span class="comment">// re-acquire status bar service next time it is needed.</span></span><br><span class="line">           mStatusBarService = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toggleRecentApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mPreloadedRecentApps = <span class="keyword">false</span>; <span class="comment">// preloading no longer needs to be canceled</span></span><br><span class="line">    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_RECENT_APPS);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IStatusBarService statusbar = getStatusBarService();</span><br><span class="line">        <span class="keyword">if</span> (statusbar != <span class="keyword">null</span>) &#123;</span><br><span class="line">            statusbar.toggleRecentApps();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"RemoteException when showing recent apps"</span>, e);</span><br><span class="line">        <span class="comment">// re-acquire status bar service next time it is needed.</span></span><br><span class="line">        mStatusBarService = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>俩个函数使用了同样的一个<code>IStatusBarService</code>，去看看import，找出了它的路径为：<br><code>import com.android.internal.statusbar.IStatusBarService;</code><br>而且<code>getStatusBarService()</code>的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IStatusBarService <span class="title">getStatusBarService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mServiceAquireLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatusBarService == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mStatusBarService = IStatusBarService.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(<span class="string">"statusbar"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mStatusBarService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可知<code>IStatusBarService</code>是一个<code>AIDL</code>，在<code>PhoneWindowManager</code>中获取到一个实例，与之跨进程进行通信。从名字顺藤摸瓜，找到services下的<code>StatusBarManagerService</code>，就是此AIDL的java实现。</p>
<h4 id="StatusBarManagerService"><a href="#StatusBarManagerService" class="headerlink" title="StatusBarManagerService"></a>StatusBarManagerService</h4><h3 id="NavigationBar"><a href="#NavigationBar" class="headerlink" title="NavigationBar"></a>NavigationBar</h3>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本篇主要介绍systemui的主要组成部分RecentsApp也就是最近任务列表的启动流程。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
      <category term="systemui" scheme="flintli.xyz/tags/systemui/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于ARGB_8888、ALPHA_8、ARGB_4444、RGB_565的理解]]></title>
    <link href="flintli.xyz/2016/03/16/Android-ARGB/"/>
    <id>flintli.xyz/2016/03/16/Android-ARGB/</id>
    <published>2016-03-16T14:31:19.000Z</published>
    <updated>2016-06-03T06:15:34.000Z</updated>
    <content type="html"><![CDATA[<p>A：透明度</p>
<p>R：红色</p>
<p>G：绿</p>
<p>B：蓝</p>
<p><code>Bitmap.Config ARGB_4444</code>：每个像素占四位，即A=4，R=4，G=4，B=4，那么一个像素点占4+4+4+4=16位 </p>
<p><code>Bitmap.Config ARGB_8888</code>：每个像素占四位，即A=8，R=8，G=8，B=8，那么一个像素点占8+8+8+8=32位</p>
<p><code>Bitmap.Config RGB_565</code>：每个像素占四位，即R=5，G=6，B=5，没有透明度，那么一个像素点占5+6+5=16位</p>
<p><code>Bitmap.Config ALPHA_8</code>：每个像素占四位，只有透明度，没有颜色。</p>
<p>一般情况下我们都是使用的<code>ARGB_8888</code>，由此可知它是最占内存的，因为一个像素占32位，8位=1字节，所以一个像素占4字节的内存。假设有一张480x800的图片，如果格式为<code>ARGB_8888</code>，那么将会占用1500KB的内存。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A：透明度</p>
<p>R：红色</p>
<p>G：绿</p>
<p>B：蓝</p>
<p><code>Bitmap.Config ARGB_4444</code>：每个像素占四位，即A=4，R=4，G=4，B=4，那么一个像素点占4+4+4+4=16位 </p>
<p>]]>
    </summary>
    
      <category term="ARGB_8888" scheme="flintli.xyz/tags/ARGB-8888/"/>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[adb shell monkey 基本命令整合]]></title>
    <link href="flintli.xyz/2016/03/07/adb-shell-monkey/"/>
    <id>flintli.xyz/2016/03/07/adb-shell-monkey/</id>
    <published>2016-03-07T13:02:26.000Z</published>
    <updated>2016-06-03T06:15:15.000Z</updated>
    <content type="html"><![CDATA[<p>主要整个Android测试工具monkey测试的基本命令以及用法。   </p>
<a id="more"></a>
<h3 id="u53C2_u6570_u8BF4_u660E"><a href="#u53C2_u6570_u8BF4_u660E" class="headerlink" title="参数说明"></a>参数说明</h3><p>配置好adb环境后，接入设备，在terminal中输入 <code>adb shell monkey</code>就可以看到monkey的列出的各个参数，现对各个参数进行说明。</p>
<p>monkey是通过package name去识别应该执行哪些apk。全部package name可通过adb shell进入设备terminal模式，cd 到 /data/data/查看。</p>
<p><code>–-pkg-blacklist-file</code> 黑名单列表，顾名思义，自然就是黑名单，monkey不执行的列表。使用方法，编写列表文件,列表中添加的是 package name，然后通过adb push 到设备中，例如 ： <code>monkey –-pkg-blacklist-file /data/blacklist.txt</code><br><code>–pkg-whitelist-file</code> 同上，此为白名单列表，即只执行列表中的package name的apk文件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要整个Android测试工具monkey测试的基本命令以及用法。   </p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
      <category term="monkey" scheme="flintli.xyz/tags/monkey/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android adb input keyevent  "keycode" 数值对应列表]]></title>
    <link href="flintli.xyz/2016/03/07/Android-adb-keyevent-input-keycode/"/>
    <id>flintli.xyz/2016/03/07/Android-adb-keyevent-input-keycode/</id>
    <published>2016-03-07T12:54:03.000Z</published>
    <updated>2016-06-20T09:28:50.000Z</updated>
    <content type="html"><![CDATA[<p>Andorid adb input keyevent “keycode”整理，方便terminal输入Androidkeyevent事件。</p>
<a id="more"></a>
<h4 id="adb__u8F93_u5165keyevent_u4E8B_u4EF6_u4F8B_u5B50_uFF1A"><a href="#adb__u8F93_u5165keyevent_u4E8B_u4EF6_u4F8B_u5B50_uFF1A" class="headerlink" title="adb 输入keyevent事件例子："></a>adb 输入keyevent事件例子：</h4><p>adb input keyevent 66<br>adb input keyevent KEYCODE_ENTER<br>主要有以上俩种形式，当然，数字比较多记起来繁琐，整理网络上的一些汇总成为此篇page。   </p>
<h4 id="KeyCode_u6574_u7406"><a href="#KeyCode_u6574_u7406" class="headerlink" title="KeyCode整理"></a>KeyCode整理</h4><p>0 –&gt;  “KEYCODE_UNKNOWN”<br>1 –&gt;  “KEYCODE_MENU”<br>2 –&gt;  “KEYCODE_SOFT_RIGHT”<br>3 –&gt;  “KEYCODE_HOME”<br>4 –&gt;  “KEYCODE_BACK”<br>5 –&gt;  “KEYCODE_CALL”<br>6 –&gt;  “KEYCODE_ENDCALL”<br>7 –&gt;  “KEYCODE_0”<br>8 –&gt;  “KEYCODE_1”<br>9 –&gt;  “KEYCODE_2”<br>10 –&gt;  “KEYCODE_3”<br>11 –&gt;  “KEYCODE_4”<br>12 –&gt;  “KEYCODE_5”<br>13 –&gt;  “KEYCODE_6”<br>14 –&gt;  “KEYCODE_7”<br>15 –&gt;  “KEYCODE_8”<br>16 –&gt;  “KEYCODE_9”<br>17 –&gt;  “KEYCODE_STAR”         *<br>18 –&gt;  “KEYCODE_POUND”        #<br>19 –&gt;  “KEYCODE_DPAD_UP”      上<br>20 –&gt;  “KEYCODE_DPAD_DOWN”    下<br>21 –&gt;  “KEYCODE_DPAD_LEFT”   58 21左<br>22 –&gt;  “KEYCODE_DPAD_RIGHT”  57 22右<br>23 –&gt;  “KEYCODE_DPAD_CENTER”<br>24 –&gt;  “KEYCODE_VOLUME_UP”<br>25 –&gt;  “KEYCODE_VOLUME_DOWN”<br>26 –&gt;  “KEYCODE_POWER”<br>29 –&gt;  “KEYCODE_A”<br>30 –&gt;  “KEYCODE_B”<br>31 –&gt;  “KEYCODE_C”<br>32 –&gt;  “KEYCODE_D”<br>33 –&gt;  “KEYCODE_E”<br>34 –&gt;  “KEYCODE_F”<br>35 –&gt;  “KEYCODE_G”<br>36 –&gt;  “KEYCODE_H”<br>37 –&gt;  “KEYCODE_I”<br>38 –&gt;  “KEYCODE_J”<br>39 –&gt;  “KEYCODE_K”<br>40 –&gt;  “KEYCODE_L”<br>41 –&gt;  “KEYCODE_M”<br>42 –&gt;  “KEYCODE_N”<br>43 –&gt;  “KEYCODE_O”<br>44 –&gt;  “KEYCODE_P”<br>45 –&gt;  “KEYCODE_Q”<br>46 –&gt;  “KEYCODE_R”<br>47 –&gt;  “KEYCODE_S”<br>48 –&gt;  “KEYCODE_T”<br>49 –&gt;  “KEYCODE_U”<br>50 –&gt;  “KEYCODE_V”<br>51 –&gt;  “KEYCODE_W”<br>52 –&gt;  “KEYCODE_X”<br>53 –&gt;  “KEYCODE_Y”<br>54 –&gt;  “KEYCODE_Z”<br>55 –&gt;  “KEYCODE_COMMA”       ，<br>56 –&gt;  “KEYCODE_PERIOD”      。<br>57 –&gt;  “KEYCODE_ALT_LEFT”<br>58 –&gt;  “KEYCODE_ALT_RIGHT”<br>59 –&gt;  “KEYCODE_SHIFT_LEFT”<br>60 –&gt;  “KEYCODE_SHIFT_RIGHT”<br>61 –&gt;  “KEYCODE_TAB”<br>62 –&gt;  “KEYCODE_SPACE”<br>63 –&gt;  “KEYCODE_SYM”<br>64 –&gt;  “KEYCODE_EXPLORER”<br>65 –&gt;  “KEYCODE_ENVELOPE”<br>66 –&gt;  “KEYCODE_ENTER”<br>67 –&gt;  “KEYCODE_DEL”<br>68 –&gt;  “KEYCODE_GRAVE”<br>69 –&gt;  “KEYCODE_MINUS”<br>70 –&gt;  “KEYCODE_EQUALS”         =<br>71 –&gt;  “KEYCODE_LEFT_BRACKET”   []<br>72 –&gt;  “KEYCODE_RIGHT_BRACKET”  []<br>73 –&gt;  “KEYCODE_BACKSLASH”<br>74 –&gt;  “KEYCODE_SEMICOLON”       ;<br>75 –&gt;  “KEYCODE_APOSTROPHE”<br>76 –&gt;  “KEYCODE_SLASH”           /<br>77 –&gt;  “KEYCODE_AT”              @<br>78 –&gt;  “KEYCODE_NUM”<br>79 –&gt;  “KEYCODE_HEADSETHOOK”<br>80 –&gt;  “KEYCODE_FOCUS”<br>81 –&gt;  “KEYCODE_PLUS”<br>82 –&gt;  “KEYCODE_MENU”            menu<br>83 –&gt;  “KEYCODE_NOTIFICATION”     notification bar<br>84 –&gt;  “KEYCODE_SEARCH”<br>85 –&gt;  “TAG_LAST_KEYCODE”</p>
<blockquote>
<p>ps: 以上仅仅列出了部分常用的</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Andorid adb input keyevent “keycode”整理，方便terminal输入Androidkeyevent事件。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android系统服务汇总列表]]></title>
    <link href="flintli.xyz/2016/01/05/Android-system-services/"/>
    <id>flintli.xyz/2016/01/05/Android-system-services/</id>
    <published>2016-01-05T01:50:46.000Z</published>
    <updated>2016-06-03T06:17:03.000Z</updated>
    <content type="html"><![CDATA[<p>业务对Android系统开机时间提出了需求，为了使得开机时间剪短，需要对系统service进行一些优化，去掉某部分使用不到的功能。现将<code>SystemServer</code>初始化阶段添加到<code>ServiceManager</code>中的服务进行一个汇总以及分析，给优化提供参照。</p>
<a id="more"></a>
<h2 id="Android__u7CFB_u7EDFservice_u5217_u8868"><a href="#Android__u7CFB_u7EDFservice_u5217_u8868" class="headerlink" title="Android 系统service列表"></a>Android 系统service列表</h2><h4 id="1-PowerManagerService"><a href="#1-PowerManagerService" class="headerlink" title="1.PowerManagerService"></a>1.PowerManagerService</h4><blockquote>
<p>主要是计算系统中和Power相关的计算，然后决策系统应该如何反应。同时协调Power如何与系统其它模块的交互，比如在待机的时候关掉不用的设备，待机时屏幕和键盘背光的关闭，用户操作的时候该打开多少设备等等。   </p>
</blockquote>
<h4 id="2-ActivityManagerService"><a href="#2-ActivityManagerService" class="headerlink" title="2.ActivityManagerService"></a>2.ActivityManagerService</h4><blockquote>
<p>这个是整个Android framework框架中最为核心的一个服务，管理整个框架中任务、进程管理, Intent解析等的核心实现。虽然名为Activity的Manager Service，但它管辖的范围，不只是Activity，还有其他三大组件，和它们所在的进程。也就是说用户应用程序的生命管理，都是由他负责的。</p>
</blockquote>
<h4 id="3-DisplayManagerService"><a href="#3-DisplayManagerService" class="headerlink" title="3.DisplayManagerService"></a>3.DisplayManagerService</h4><blockquote>
<p>用于管理全局显示生命周期，决定在已连接的物理设备如何配置逻辑显示，并且通知系统和应用状态的改变。ANDROID从版本4.2开始提供了一个显示管理服务 DisplayManagerService,支持多种显示类型的多个显示器的镜像显示，包括内建的显示类型（本地）、HDMI显示类型以及支持WIFI Display 协议( MIRACAST)，实现本地设备在远程显示器上的镜像显示。</p>
</blockquote>
<h4 id="4-TelephonyRegistry"><a href="#4-TelephonyRegistry" class="headerlink" title="4.TelephonyRegistry"></a>4.TelephonyRegistry</h4><blockquote>
<p>提供电话注册、管理服务，可以获取电话的链接状态、信号强度等等。</p>
</blockquote>
<h4 id="5-SchedulingPolicyService"><a href="#5-SchedulingPolicyService" class="headerlink" title="5.SchedulingPolicyService"></a>5.SchedulingPolicyService</h4><blockquote>
<p>调度策略。</p>
</blockquote>
<h4 id="6-PackageManagerService"><a href="#6-PackageManagerService" class="headerlink" title="6.PackageManagerService"></a>6.PackageManagerService</h4><blockquote>
<p>Android framework框架核心服务，用于APK的解析、权限验证、安装等。</p>
</blockquote>
<h4 id="7-EntropyMixer"><a href="#7-EntropyMixer" class="headerlink" title="7.EntropyMixer"></a>7.EntropyMixer</h4><blockquote>
<p>熵服务，周期性的加载和保存随机信息。主要是linux开机后，/dev/random的状态可能是可预知的，这样一些需要随机信息的应用程序就可能会有问题。这个无需提供应用程序接口。</p>
</blockquote>
<h4 id="8-UserManagerService"><a href="#8-UserManagerService" class="headerlink" title="8.UserManagerService"></a>8.UserManagerService</h4><blockquote>
<p>USB Host和device管理服务。</p>
</blockquote>
<h4 id="9-AccountManagerService"><a href="#9-AccountManagerService" class="headerlink" title="9.AccountManagerService"></a>9.AccountManagerService</h4><blockquote>
<p>Android账户服务，提供了对账户、密码、授权的集中管理。</p>
</blockquote>
<h4 id="10-ContentService"><a href="#10-ContentService" class="headerlink" title="10.ContentService"></a>10.ContentService</h4><blockquote>
<p>内容服务，主要是数据库等提供解决方法的服务。</p>
</blockquote>
<h4 id="11-LightsService"><a href="#11-LightsService" class="headerlink" title="11.LightsService"></a>11.LightsService</h4><blockquote>
<p>光感应传感器服务。</p>
</blockquote>
<h4 id="12-BatteryService"><a href="#12-BatteryService" class="headerlink" title="12.BatteryService"></a>12.BatteryService</h4><blockquote>
<p>负责监控电池的充电状态、电池电量、电压、温度等信息，当电池信息发生变化时，发生广播通知其他关系电池信息的进程和服务。</p>
</blockquote>
<h4 id="13-VibratorService"><a href="#13-VibratorService" class="headerlink" title="13.VibratorService"></a>13.VibratorService</h4><blockquote>
<p>振动器服务。</p>
</blockquote>
<h4 id="14-ConsumerIrService"><a href="#14-ConsumerIrService" class="headerlink" title="14.ConsumerIrService"></a>14.ConsumerIrService</h4><blockquote>
<p>远程控制，通过红外等控制周围的设备（例如电视等）</p>
</blockquote>
<h4 id="15-AlarmManagerService"><a href="#15-AlarmManagerService" class="headerlink" title="15.AlarmManagerService"></a>15.AlarmManagerService</h4><blockquote>
<p>提供闹铃和定时器等功能。</p>
</blockquote>
<h4 id="16-Init_Watchdog"><a href="#16-Init_Watchdog" class="headerlink" title="16.Init Watchdog"></a>16.Init Watchdog</h4><blockquote>
<p>1).接收系统内部reboot请求,重启系统。2).监护SystemServer进程,防止系统死锁。</p>
</blockquote>
<h4 id="17-WindowManagerService"><a href="#17-WindowManagerService" class="headerlink" title="17.WindowManagerService"></a>17.WindowManagerService</h4><blockquote>
<p>Android framework框架核心服务，窗口管理服务。这里最核心的就是输入事件的分发和管理。</p>
</blockquote>
<h4 id="18-BluetoothManagerService"><a href="#18-BluetoothManagerService" class="headerlink" title="18.BluetoothManagerService"></a>18.BluetoothManagerService</h4><blockquote>
<p>负责蓝牙后台管理和服务。</p>
</blockquote>
<h4 id="19-InputManagerService"><a href="#19-InputManagerService" class="headerlink" title="19.InputManagerService"></a>19.InputManagerService</h4><blockquote>
<p>以前在WindowManagerService中，现在独立了出来，用户处理事件分发。</p>
</blockquote>
<h4 id="20-AccessibilityManagerService"><a href="#20-AccessibilityManagerService" class="headerlink" title="20.AccessibilityManagerService"></a>20.AccessibilityManagerService</h4><blockquote>
<p>辅助管理程序截获所有的用户输入，并根据这些输入给用户一些额外的反馈，起到辅助的效果，View的点击、焦点等事件分发管理服。</p>
</blockquote>
<h4 id="21-MountService"><a href="#21-MountService" class="headerlink" title="21.MountService"></a>21.MountService</h4><blockquote>
<p>磁盘加载服务程序，一般要和一个linux daemon程序如vold/mountd等合作起作用，主要负责监听并广播device的mount/unmount/badremoval等等事件。</p>
</blockquote>
<h4 id="22-LockSettingsService"><a href="#22-LockSettingsService" class="headerlink" title="22.LockSettingsService"></a>22.LockSettingsService</h4><blockquote>
<p>和锁屏界面中的输入密码，手势等安全功能有关。可以保存每个user的相关<br>锁屏信息。</p>
</blockquote>
<h4 id="23-DevicePolicyManagerService"><a href="#23-DevicePolicyManagerService" class="headerlink" title="23.DevicePolicyManagerService"></a>23.DevicePolicyManagerService</h4><blockquote>
<p>提供一些系统级别的设置及属性，比如锁屏、恢复出厂设置、设置密码、强制清除密码，修改密码、设置屏幕灯光渐暗时间间隔等操作。</p>
</blockquote>
<h4 id="24-StatusBarManagerService"><a href="#24-StatusBarManagerService" class="headerlink" title="24.StatusBarManagerService"></a>24.StatusBarManagerService</h4><blockquote>
<p>状态栏，与systemui交互。</p>
</blockquote>
<h4 id="25-ClipboardService"><a href="#25-ClipboardService" class="headerlink" title="25.ClipboardService"></a>25.ClipboardService</h4><blockquote>
<p>剪贴板服务。</p>
</blockquote>
<h4 id="26-NetworkManagementService"><a href="#26-NetworkManagementService" class="headerlink" title="26.NetworkManagementService"></a>26.NetworkManagementService</h4><blockquote>
<p>网络管理服务。ANDROID 系统网络连接和管理服务由四个系统服务ConnectivityService、NetworkPolicyManagerService、NetworkManagementService、NetworkStatsService共同配合完成网络连接和管理功能。ConnectivityService、NetworkPolicyManagerService、NetworkStatsService三个服务都通过INetworkManagementService接口跨进程访问NetworkManagementService服务，实现与网络接口的交互及信息读取。</p>
</blockquote>
<h4 id="27-TextServicesManagerService"><a href="#27-TextServicesManagerService" class="headerlink" title="27.TextServicesManagerService"></a>27.TextServicesManagerService</h4><blockquote>
<p>文本服务，例如文本检查等。</p>
</blockquote>
<h4 id="28-NetworkStatsService"><a href="#28-NetworkStatsService" class="headerlink" title="28.NetworkStatsService"></a>28.NetworkStatsService</h4><blockquote>
<p>网络统计相关。</p>
</blockquote>
<h4 id="29-NetworkPolicyManagerService"><a href="#29-NetworkPolicyManagerService" class="headerlink" title="29.NetworkPolicyManagerService"></a>29.NetworkPolicyManagerService</h4><blockquote>
<p>维护网络使用策略。</p>
</blockquote>
<h4 id="30-WifiP2pService"><a href="#30-WifiP2pService" class="headerlink" title="30.WifiP2pService"></a>30.WifiP2pService</h4><blockquote>
<p>Wifi Direct服务。</p>
</blockquote>
<h4 id="31-WifiService"><a href="#31-WifiService" class="headerlink" title="31.WifiService"></a>31.WifiService</h4><blockquote>
<p>Wifi服务。</p>
</blockquote>
<h4 id="32-ConnectivityService"><a href="#32-ConnectivityService" class="headerlink" title="32.ConnectivityService"></a>32.ConnectivityService</h4><blockquote>
<p>网络连接状态服务。</p>
</blockquote>
<h4 id="33-EthernetService"><a href="#33-EthernetService" class="headerlink" title="33.EthernetService"></a>33.EthernetService</h4><blockquote>
<p>以太网服务。</p>
</blockquote>
<h4 id="34-NsdService"><a href="#34-NsdService" class="headerlink" title="34.NsdService"></a>34.NsdService</h4><blockquote>
<p>网络服务搜索。</p>
</blockquote>
<h4 id="35-UpdateLockService"><a href="#35-UpdateLockService" class="headerlink" title="35.UpdateLockService"></a>35.UpdateLockService</h4><blockquote>
<p>4.1新增，提供升级锁，Advisory wakelock-like mechanism by which processes that should not be interrupted for OTA/update purposes can so advise the OS.</p>
</blockquote>
<h4 id="36-NotificationManagerService"><a href="#36-NotificationManagerService" class="headerlink" title="36.NotificationManagerService"></a>36.NotificationManagerService</h4><blockquote>
<p>通知栏管理服务</p>
</blockquote>
<h4 id="37-DeviceStorageMonitorService"><a href="#37-DeviceStorageMonitorService" class="headerlink" title="37.DeviceStorageMonitorService"></a>37.DeviceStorageMonitorService</h4><blockquote>
<p>磁盘空间状态检测服务 </p>
</blockquote>
<h4 id="38-LocationManagerService"><a href="#38-LocationManagerService" class="headerlink" title="38.LocationManagerService"></a>38.LocationManagerService</h4><blockquote>
<p>磁盘空间状态检测服务 </p>
</blockquote>
<h4 id="39-CountryDetectorService"><a href="#39-CountryDetectorService" class="headerlink" title="39.CountryDetectorService"></a>39.CountryDetectorService</h4><blockquote>
<p>检查当前用户所在的国家</p>
</blockquote>
<h4 id="40-SearchManagerService"><a href="#40-SearchManagerService" class="headerlink" title="40.SearchManagerService"></a>40.SearchManagerService</h4><blockquote>
<p>搜索管理服务</p>
</blockquote>
<h4 id="41-DropBoxManagerService"><a href="#41-DropBoxManagerService" class="headerlink" title="41.DropBoxManagerService"></a>41.DropBoxManagerService</h4><blockquote>
<p>系统日志文件管理服务，通过该服务访问Linux层面的Dropbox程序</p>
</blockquote>
<h4 id="42-WallpaperManagerService"><a href="#42-WallpaperManagerService" class="headerlink" title="42.WallpaperManagerService"></a>42.WallpaperManagerService</h4><blockquote>
<p>壁纸管理服务</p>
</blockquote>
<h4 id="43-AudioService"><a href="#43-AudioService" class="headerlink" title="43.AudioService"></a>43.AudioService</h4><blockquote>
<p>音频管理服务</p>
</blockquote>
<h4 id="44-UsbService"><a href="#44-UsbService" class="headerlink" title="44.UsbService"></a>44.UsbService</h4><blockquote>
<p>USB服务</p>
</blockquote>
<h4 id="45-SerialService"><a href="#45-SerialService" class="headerlink" title="45.SerialService"></a>45.SerialService</h4><blockquote>
<p>串口服务，可支持对串口的设备进行操作</p>
</blockquote>
<h4 id="46-TwilightService"><a href="#46-TwilightService" class="headerlink" title="46.TwilightService"></a>46.TwilightService</h4><blockquote>
<p>指出用户当前所在位置是否为晚上，被UiModeManager等用来调整夜间模式。</p>
</blockquote>
<h4 id="47-UiModeManagerService"><a href="#47-UiModeManagerService" class="headerlink" title="47.UiModeManagerService"></a>47.UiModeManagerService</h4><blockquote>
<p>管理当前Android设备的夜间模式和行车模式</p>
</blockquote>
<h4 id="48-BackupManagerService"><a href="#48-BackupManagerService" class="headerlink" title="48.BackupManagerService"></a>48.BackupManagerService</h4><blockquote>
<p>系统备份服务</p>
</blockquote>
<h4 id="49-AppWidgetService"><a href="#49-AppWidgetService" class="headerlink" title="49.AppWidgetService"></a>49.AppWidgetService</h4><blockquote>
<p>Android可以让用户写的程序以widget的方式放在桌面上，这就是这套管理和服务的接口</p>
</blockquote>
<h4 id="50-RecognitionManagerService"><a href="#50-RecognitionManagerService" class="headerlink" title="50.RecognitionManagerService"></a>50.RecognitionManagerService</h4><blockquote>
<p>身份识别服务</p>
</blockquote>
<h4 id="51-DiskStatsService"><a href="#51-DiskStatsService" class="headerlink" title="51.DiskStatsService"></a>51.DiskStatsService</h4><blockquote>
<p>磁盘统计服务</p>
</blockquote>
<h4 id="52-SamplingProfilerService"><a href="#52-SamplingProfilerService" class="headerlink" title="52.SamplingProfilerService"></a>52.SamplingProfilerService</h4><blockquote>
<p>用于耗时统计等。</p>
</blockquote>
<h4 id="53-NetworkTimeUpdateService"><a href="#53-NetworkTimeUpdateService" class="headerlink" title="53.NetworkTimeUpdateService"></a>53.NetworkTimeUpdateService</h4><blockquote>
<p>监视网络时间，当网络时间变化时更新本地时间。</p>
</blockquote>
<h4 id="54-CommonTimeManagementService"><a href="#54-CommonTimeManagementService" class="headerlink" title="54.CommonTimeManagementService"></a>54.CommonTimeManagementService</h4><blockquote>
<p>管理本地常见的时间服务的配置，在网络配置变化时重新配置本地服务。</p>
</blockquote>
<h4 id="55-DreamManagerService"><a href="#55-DreamManagerService" class="headerlink" title="55.DreamManagerService"></a>55.DreamManagerService</h4><blockquote>
<p>屏幕保护。</p>
</blockquote>
<h4 id="56-AssetAtlasService"><a href="#56-AssetAtlasService" class="headerlink" title="56.AssetAtlasService"></a>56.AssetAtlasService</h4><blockquote>
<p>负责将预加载的bitmap组装成纹理贴图，生成的纹理贴图可以被用来跨进程使用，以减少内存。</p>
</blockquote>
<h4 id="57-PrintManagerService"><a href="#57-PrintManagerService" class="headerlink" title="57.PrintManagerService"></a>57.PrintManagerService</h4><blockquote>
<p>打印服务。</p>
</blockquote>
<h4 id="58-MediaRouterService"><a href="#58-MediaRouterService" class="headerlink" title="58.MediaRouterService"></a>58.MediaRouterService</h4><blockquote>
<p>MediaRouterService用于管理各个应用程序的多媒体播放的行为。</p>
</blockquote>
<h4 id="59-WiredAccessoryManager"><a href="#59-WiredAccessoryManager" class="headerlink" title="59.WiredAccessoryManager"></a>59.WiredAccessoryManager</h4><blockquote>
<p>监视手机和底座上的耳机。</p>
</blockquote>
<h4 id="60-KeyguardService"><a href="#60-KeyguardService" class="headerlink" title="60.KeyguardService"></a>60.KeyguardService</h4><blockquote>
<p>锁屏。</p>
</blockquote>
<hr>
<h4 id="JNI_u5C42_u52A0_u8F7D_u7684_u670D_u52A1"><a href="#JNI_u5C42_u52A0_u8F7D_u7684_u670D_u52A1" class="headerlink" title="JNI层加载的服务"></a>JNI层加载的服务</h4><blockquote>
<p>服务类名称    – 作用描述<br>SurfaceFlinger    – Framebuffer的合成和管理服务<br>SensorService – 传感器服务<br>MediaPlayerService    – 提供媒体播放服务，对应的java端接口在mediaplayer.java<br>AudioFlinger – 声音的录播放服务，包括混音等<br>CameraService – 提供camera的录制、preview等功能的服务<br>AudioPolicyService – 主要功能有检查输入输出设备的连接状态及系统的音频策略的切换等<br>DrmManagerService – DRM，英文全称Digital Rights Management, 可以翻译为：数字版权管理。指的是出版者用来控制被保护对象的使用权的一些技术，这些技术保护的有数字化内容（例如：软件、音乐、电影）以及硬件，处理数字化产品的某个实例的使用限制</p>
</blockquote>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>业务对Android系统开机时间提出了需求，为了使得开机时间剪短，需要对系统service进行一些优化，去掉某部分使用不到的功能。现将<code>SystemServer</code>初始化阶段添加到<code>ServiceManager</code>中的服务进行一个汇总以及分析，给优化提供参照。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="flintli.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016]]></title>
    <link href="flintli.xyz/2016/01/01/2016/"/>
    <id>flintli.xyz/2016/01/01/2016/</id>
    <published>2015-12-31T16:55:11.000Z</published>
    <updated>2016-01-01T12:03:00.000Z</updated>
    <content type="html"><![CDATA[<p>2016的第一篇blog。</p>
<a id="more"></a>
<p>2016的第一篇blog，聊聊2015，聊聊未来，聊聊不知道说什么。。。</p>
<p>跨年跨年，不知道从什么时候开始流行起了跨年这么个说法，跨着跨着一年就过去了，真的好快。<br>今年倒是有着这么一个说法，腿短的不叫跨年，叫蹦，单身狗也不叫跨年，叫熬夜。蹦着熬夜，这么一说我倒还真是适合-_-|||<br>2015-2016也算是改变比较重大的一年了，从学生跨入社会，正式脱离学校生活。7月份毕业至今，仍是一事无成，没有积蓄，挥霍无度。<br>人倒是变得世故了很多，不再那么单纯，那么纠结。<br>在学校是技术渣，出来后还是技术渣，还是无心学习没有搞技术的心思，还是安逸度日。<br>打球的习惯还保持着，就是不知道能持续到何年何日，或许终老吧。骑车呢，好像放弃了一样，虽然还是有着不贴现实的梦想，但感觉已经老了，没有再去破风的念头。<br>工作后从Android的开发者转换到了底层源码中去，研究地蛋都碎了一地。也不知道后续能有什么发展。<br>买了iPhone，换了mac pro，开发条件真的是不可同日而语，有了搞搞ios的心思，也不知道能不能持续下去。还想着搞搞Python的，哎，就是爱瞎折腾。</p>
<p>好像也没有太多好聊的，之后再继续更新吧。</p>
<p>2016的第一天，宅了一天。大半夜买了域名，配了半夜没配好，早上早早爬起来搞了一个上午。中午时分差不多ok，甚为欣慰。<br>下午继续宅，看直播看视频，在平平淡淡中元旦步入夜晚···<br>晚饭呢，感谢某人的盛情款待，东西还挺好吃的，虽然今天确实没有什么食欲，但问题的关键是可以让好心情继续保持呀。<br>一些朋友虽然碰头的机会很少，院长远在帝都，几个在深圳，广州的也都忙着。但总感觉距离不远，一块到处串的情景还特别清晰。有空是该去深圳坑坑正扬了。<br>新的一年的，也有些小小的憧憬吧，希望能继续好好的发展下去，有一点点好感，祝福。。。<br>个性比较浪，问我喜不喜欢，心动了，你说能不喜欢么。<br>还没萌芽的就断了，还好，确实是我太心急了点，让人误解也没办法，全都怪我。   </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016的第一篇blog。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="flintli.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
