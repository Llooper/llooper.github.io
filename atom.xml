<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[FLINT LI's Blog]]></title>
  <subtitle><![CDATA[Walk steps step by step]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="llooper.space/"/>
  <updated>2016-05-24T07:15:22.000Z</updated>
  <id>llooper.space/</id>
  
  <author>
    <name><![CDATA[FLINT LI]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android 系统framework学习之路]]></title>
    <link href="llooper.space/2016/05/24/Android-system-and-framework-study/"/>
    <id>llooper.space/2016/05/24/Android-system-and-framework-study/</id>
    <published>2016-05-24T07:13:57.000Z</published>
    <updated>2016-05-24T07:15:22.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/6618363</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/arti]]>
    </summary>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 系统崩溃日志收集上传]]></title>
    <link href="llooper.space/2016/05/19/Android-%E7%B3%BB%E7%BB%9F%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E4%B8%8A%E4%BC%A0/"/>
    <id>llooper.space/2016/05/19/Android-系统崩溃日志收集上传/</id>
    <published>2016-05-19T03:53:29.000Z</published>
    <updated>2016-05-19T06:00:28.000Z</updated>
    <content type="html"><![CDATA[<p>Android系统日志收集与上传。</p>
<a id="more"></a>
<h2 id="Android_u7CFB_u7EDF_u65E5_u5FD7_u6536_u96C6_u4E0E_u4E0A_u4F20"><a href="#Android_u7CFB_u7EDF_u65E5_u5FD7_u6536_u96C6_u4E0E_u4E0A_u4F20" class="headerlink" title="Android系统日志收集与上传"></a>Android系统日志收集与上传</h2><blockquote>
<p>需求： 收集系统crash、anr等日志，并上传到服务器。<br>实现： 利用DropBoxManager持续化存储系统数据的机制，取得dropbox的日志文件并上传。</p>
</blockquote>
<h3 id="DropBoxManager_u7B80_u4ECB"><a href="#DropBoxManager_u7B80_u4ECB" class="headerlink" title="DropBoxManager简介"></a>DropBoxManager简介</h3><p>对DropBoxManager进行简单的介绍。</p>
<h4 id="u7CFB_u7EDF_u9519_u8BEF_u7C7B_u578BTAG"><a href="#u7CFB_u7EDF_u9519_u8BEF_u7C7B_u578BTAG" class="headerlink" title="系统错误类型TAG"></a>系统错误类型TAG</h4><ul>
<li><code>crash</code></li>
<li><code>anr</code></li>
<li><code>wtf</code></li>
<li><code>strict_mode</code></li>
<li><code>lowmem</code></li>
<li><code>watchdog</code></li>
<li><code>netstats_error</code></li>
<li><code>SYSTEM_TOMBSTONE</code></li>
<li><code>BATTERY_DISCHARGE_INFO</code></li>
</ul>
<p>以上是分析源码得出的DropBoxManager系统错误类型。</p>
<h4 id="u6587_u4EF6_u5B58_u50A8"><a href="#u6587_u4EF6_u5B58_u50A8" class="headerlink" title="文件存储"></a>文件存储</h4><p>DropBoxManager 使用的是文件存储, 所有的记录都存储在 /data/system/dropbox 目录中, 一条记录就是一个文件, 当文本文件的尺寸超过文件系统的最小区块尺寸后, DropBoxManager 还会自动压缩该文件, 通常文件名以调用 DropBoxManager 的 TAG 参数开头。</p>
<h4 id="u4F7F_u7528DropBoxManager"><a href="#u4F7F_u7528DropBoxManager" class="headerlink" title="使用DropBoxManager"></a>使用DropBoxManager</h4><p>每当DropBoxManager生成新的记录, 就会广播一个 <code>DropBoxManager.ACTION_DROPBOX_ENTRY_ADDED</code> Intent，日志收集系统只需接收广播，然后去读取文件，上传到服务器即可。<br>下面给出具体的代码示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BroadcastReceiver BugReportReveiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DropBoxManager.ACTION_DROPBOX_ENTRY_ADDED.equals(intent.getAction())) &#123;</span><br><span class="line">               tag = intent.getExtras().getString(DropBoxManager.EXTRA_TAG);</span><br><span class="line">               time = intent.getExtras().getLong(DropBoxManager.EXTRA_TIME);</span><br><span class="line">               Log.d(TAG, <span class="string">"BugReportReveiver onReceive..."</span>);</span><br><span class="line">               Log.d(TAG, <span class="string">"tag :"</span> + tag + <span class="string">"----- time :"</span> + time);</span><br><span class="line"></span><br><span class="line">               file = selectFile(getTagtype(tag)); <span class="comment">//getFile</span></span><br><span class="line">               sendErrorFileToserver(); <span class="comment">//upload</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> File <span class="title">selectFile</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">       String fileName = <span class="keyword">null</span>;</span><br><span class="line">       String path = <span class="string">"data/system/dropbox/"</span>;</span><br><span class="line">       <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               fileName = path + tag + <span class="string">"@"</span> + time + <span class="string">".txt"</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               fileName = path + tag + <span class="string">"@"</span> + time + <span class="string">".txt.gz"</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">       <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] arr_tag = &#123;<span class="string">"system_app_crash"</span>,</span><br><span class="line">           <span class="string">"system_server_wtf"</span>,<span class="string">"system_app_anr"</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getTagtype</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> iter = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (; iter &lt; arr_tag.length; iter++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arr_tag[iter].equals(tag)) &#123;</span><br><span class="line">               <span class="keyword">return</span> iter;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android系统日志收集与上传。</p>]]>
    
    </summary>
    
      <category term="AOSP" scheme="llooper.space/tags/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[happy birthday]]></title>
    <link href="llooper.space/2016/05/19/happy-birthday/"/>
    <id>llooper.space/2016/05/19/happy-birthday/</id>
    <published>2016-05-18T16:00:00.000Z</published>
    <updated>2016-05-18T15:48:38.000Z</updated>
    <content type="html"><![CDATA[<p>又是一年，生日快乐！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>又是一年，生日快乐！</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to replace the android default testkey in AOSP]]></title>
    <link href="llooper.space/2016/05/18/Android-replace-the-key-int-the-aosp/"/>
    <id>llooper.space/2016/05/18/Android-replace-the-key-int-the-aosp/</id>
    <published>2016-05-18T07:53:08.000Z</published>
    <updated>2016-05-18T09:00:51.000Z</updated>
    <content type="html"><![CDATA[<p>本篇主要介绍aosp的key类型，以及如何替换AOSP原有签名key，生成自定义的key并对系统签名。</p>
<a id="more"></a>
<h3 id="u7B7E_u540D_u7C7B_u578B"><a href="#u7B7E_u540D_u7C7B_u578B" class="headerlink" title="签名类型"></a>签名类型</h3><p>Android的标准签名key文件位于<code>/build/target/product/security</code>目录下，主要有4个key，分别为：</p>
<ul>
<li><strong><code>testkey</code></strong>：普通签名APK，默认情况下使用。</li>
<li><strong><code>platform</code></strong>：该签名APK完成一些系统的核心。</li>
<li><strong><code>shared</code></strong>：该签名APK需要和home/contacts进程共享数据。</li>
<li><strong><code>media</code></strong>：使用android.media作为共享UID的APK签名。</li>
</ul>
<p>其中 <code>*.pk8</code>代表私钥，<code>*.x509.pem</code>公钥，一定是成对出现的。<br>testkey是作为android编译的时候默认的签名key，如果系统中的apk的Android.mk中没有设置<strong><code>LOCAL_CERTIFICATE</code></strong>的值，就默认使用<strong><code>testkey</code></strong>。    </p>
<p>而如果设置成：<br><strong><code>LOCAL_CERTIFICATE := platform</code></strong><br>就代表使用platform来签名，这样的话这个apk就拥有了和system相同的签名，因为系统级别的签名也是使用的platform来签名，此时使用<code>android:sharedUserId=&quot;android.uid.system&quot;</code>才有用！</p>
<h3 id="u81EA_u5B9A_u4E49_u7B7E_u540Dkey"><a href="#u81EA_u5B9A_u4E49_u7B7E_u540Dkey" class="headerlink" title="自定义签名key"></a>自定义签名key</h3><h4 id="key_u751F_u6210_u4ECB_u7ECD"><a href="#key_u751F_u6210_u4ECB_u7ECD" class="headerlink" title="key生成介绍"></a>key生成介绍</h4><p>在<code>/build/target/product/security</code>目录下有个README，里面说明了怎么制作这些key以及使用问题（android4.4）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">The following commands were used to generate the test key pairs:</span><br><span class="line"></span><br><span class="line">  development/tools/make_key testkey  <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line">  development/tools/make_key platform <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line">  development/tools/make_key shared   <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line">  development/tools/make_key media    <span class="string">'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'</span></span><br><span class="line"></span><br><span class="line">The following standard test keys are currently included:</span><br><span class="line"></span><br><span class="line">testkey -- a generic key <span class="keyword">for</span> packages that do not otherwise specify a key.</span><br><span class="line">platform -- a test key <span class="keyword">for</span> packages that are part of the core platform.</span><br><span class="line">shared -- a test key <span class="keyword">for</span> things that are shared in the home/contacts process.</span><br><span class="line">media -- a test key <span class="keyword">for</span> packages that are part of the media/download system.</span><br><span class="line"></span><br><span class="line">These test keys are used strictly in development, and should never be assumed</span><br><span class="line">to convey any sort of validity.  When $BUILD_SECURE=<span class="keyword">true</span>, the code should not</span><br><span class="line">honor these keys in any context.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">signing using the openssl <span class="title">commandline</span> <span class="params">(<span class="keyword">for</span> boot/system images)</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1. convert pk8 format key to pem format</span><br><span class="line">   % openssl pkcs8 -inform DER -nocrypt -in testkey.pk8 -out testkey.pem</span><br><span class="line"></span><br><span class="line">2. create a signature using the pem format key</span><br><span class="line">   % openssl dgst -binary -sha1 -sign testkey.pem FILE &gt; FILE.sig</span><br><span class="line"></span><br><span class="line">extracting <span class="keyword">public</span> keys <span class="keyword">for</span> embedding</span><br><span class="line">------------------------------------</span><br><span class="line">it's a Java tool</span><br><span class="line">but it generates C code</span><br><span class="line">take a look at commands/recovery/Android.mk</span><br><span class="line">you'll see it running $<span class="params">(HOST_OUT_JAVA_LIBRARIES)</span>/dumpkey.jar</span></span><br></pre></td></tr></table></figure>
<p>从README可知，key是通过<code>development/tools</code>目录下的<code>make_key</code>脚本生成的，脚本需要传入两个参数。其中第一个参数是key的名字，我们可以不修改，使用aosp默认的4个key的名字；第二个参数即是具体的一些属性，此为key真正的关键（我们需要修改的部分），下面对第二个参数的一些具体属性做出分析解释：</p>
<blockquote>
<p>C —&gt; Country Name (2 letter code)<br>ST —&gt; State or Province Name (full name)<br>L —&gt; Locality Name (eg, city)<br>O —&gt; Organization Name (eg, company)<br>OU —&gt; Organizational Unit Name (eg, section)<br>CN —&gt; Common Name (eg, your name or your server’s hostname)<br>emailAddress —&gt; Contact email address</p>
</blockquote>
<p>另外在是用<code>make_key</code>生成key的过程中会提示输入password，一般是不输入，直接enter的。</p>
<h4 id="u5220_u9664_u5DF2_u5B58_u5728_u7684key"><a href="#u5220_u9664_u5DF2_u5B58_u5728_u7684key" class="headerlink" title="删除已存在的key"></a>删除已存在的key</h4><p>进入到<code>/build/target/product/security</code>目录执行如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ./*.p*</span><br></pre></td></tr></table></figure>
<p>删除全部已存在的key，然后重新生成新的key。</p>
<h4 id="u751F_u6210key"><a href="#u751F_u6210key" class="headerlink" title="生成key"></a>生成key</h4><p>返回到AOSP的根目录，使用<code>make_key</code>脚本去生成4个签名key。</p>
<h5 id="testkey"><a href="#testkey" class="headerlink" title="testkey"></a>testkey</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/testkey &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h5 id="media"><a href="#media" class="headerlink" title="media"></a>media</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/media &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h5 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/shared &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h5 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./development/tools/make_key build/target/product/security/platform &#8216;/C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#8217;</span><br></pre></td></tr></table></figure>
<h4 id="u9A8C_u8BC1key"><a href="#u9A8C_u8BC1key" class="headerlink" title="验证key"></a>验证key</h4><p>在生成4个key后，再使用<code>OpenSSL</code>的工具来验证一下生成的key是否正常。<br>进入到/build/target/product/security目录，执行如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -noout -subject -issuer -in media.x509.pem</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subject= /C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com&#10;issuer= /C=US/ST=Utah/L=Salt Lake City/O=Android/OU=Android/CN=Android/emailAddress=flint@gexne.com</span><br></pre></td></tr></table></figure>
<p>另外3个key的验证类似media，就不再多做介绍。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -noout -subject -issuer -in shared.x509.pem&#10;openssl x509 -noout -subject -issuer -in platform.x509.pem&#10;openssl x509 -noout -subject -issuer -in testkey.x509.pem</span><br></pre></td></tr></table></figure>
<h4 id="u4FEE_u6539_u7CFB_u7EDF_u9ED8_u8BA4_u7B7E_u540Dkey"><a href="#u4FEE_u6539_u7CFB_u7EDF_u9ED8_u8BA4_u7B7E_u540Dkey" class="headerlink" title="修改系统默认签名key"></a>修改系统默认签名key</h4><p>在上面提到如果apk中的编译选项<code>LOCAL_CERTIFICATE</code>没有设置的话，就会使用默认的<code>testkey</code>作为签名key，我们可以修改成自己想要的key，按照上面的步骤制作一个<code>releasekey</code>，修改android配置在<code>/build/core/config.mk</code>中定义变量：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">DEFAULT_SYSTEM_DEV_CERTIFICATE</span> := build/target/product/security/testkey</span><br></pre></td></tr></table></figure>
<p>TO </p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">DEFAULT_SYSTEM_DEV_CERTIFICATE</span> := build/target/product/security/releasekey</span><br></pre></td></tr></table></figure>
<p>生成<code>testkey</code>的时候，原先<code>testkey</code>的名字换成<code>releasekey</code>，步骤都一样。</p>
<p><strong>PS：可以不用修改testkey的名字，这个不是很关键。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇主要介绍aosp的key类型，以及如何替换AOSP原有签名key，生成自定义的key并对系统签名。</p>]]>
    
    </summary>
    
      <category term="AOSP" scheme="llooper.space/tags/AOSP/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android user版本编译]]></title>
    <link href="llooper.space/2016/05/16/Android-user%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91/"/>
    <id>llooper.space/2016/05/16/Android-user版本编译/</id>
    <published>2016-05-16T12:16:02.000Z</published>
    <updated>2016-05-16T12:46:58.000Z</updated>
    <content type="html"><![CDATA[<p>怎么编译user版本的Android系统。</p>
<a id="more"></a>
<p>Android编译选项分别有3个，user，eng，userDebug。这3个选项分别对应的版本如下：</p>
<blockquote>
<p>eng：debug 版本<br>user: release 版本<br>userDebug版本：部分debug版本</p>
</blockquote>
<p>详细的介绍以及每个选项对应的功能权限在<a href="http://llooper.space/2016/05/11/Android-ADB%E7%8A%B6%E6%80%81%E5%BC%80%E5%85%B3/">上一篇</a> 已经介绍过。</p>
<p>本篇主要介绍如何编译user版本（其他版本同理），以下全部代码都以rockchip作为示例。</p>
<ul>
<li><strong>修改脚本：</strong>user等编译选项主要由<code>device/rockchip/rkpx2/vendorsetup.sh</code>脚本进行控制。打开脚本找到<code>add_lunch_combo rkpx2-eng</code>项，将eng改为user。也即是<code>add_lunch_combo rkpx2-user</code>。</li>
<li><strong>加载脚本：</strong>脚本修改完成之后保存，要使其生效必须回到aosp根目录，执行如下<code>source build/envsetup.sh</code>使其加载进入makefile系统。</li>
<li><strong>选择user版本：</strong>加载完毕之后，还需选择user版本进行编译。使用<code>lunch</code>命令进行选择，在aosp根没目录执行<code>lunch</code>，然后选择<code>rkpx2-user</code>。</li>
<li><strong>make</strong></li>
</ul>
<p>执行make之后，可以看到输出日志，<code>TARGET_BUILD_VARIANT</code>对应的即是编译选项，<code>TARGET_BUILD_VARIANT=user</code>表明编译的是user版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>怎么编译user版本的Android系统。</p>]]>
    
    </summary>
    
      <category term="android" scheme="llooper.space/tags/android/"/>
    
      <category term="user" scheme="llooper.space/tags/user/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android ADB 状态开关]]></title>
    <link href="llooper.space/2016/05/11/Android-ADB%E7%8A%B6%E6%80%81%E5%BC%80%E5%85%B3/"/>
    <id>llooper.space/2016/05/11/Android-ADB状态开关/</id>
    <published>2016-05-11T06:52:10.000Z</published>
    <updated>2016-05-11T08:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Android设备adb root权限控制以及 adb shell的开关控制。</p>
<a id="more"></a>
<h3 id="adb_root_u6743_u9650"><a href="#adb_root_u6743_u9650" class="headerlink" title="adb root权限"></a>adb root权限</h3><p>adb 的root权限是在system/core/adb/adb.c中控制。主要根据<code>ro.secure</code>以及 <code>ro.debuggable</code>等<code>system property</code> 来控制。默认即档ro.secure 为0 时，即开启root 权限，为1时再根据ro.debuggable等选项来确认是否可以用开启root 权限。</p>
<h3 id="user_eng__u7528_u6237_u7248_u672C_u5DEE_u5F02"><a href="#user_eng__u7528_u6237_u7248_u672C_u5DEE_u5F02" class="headerlink" title="user eng 用户版本差异"></a>user eng 用户版本差异</h3><p><code>ro.secure</code>以及<code>ro.debuggable</code>的值设置跟用户编译版本有关，一下是Google官方的描述。</p>
<p>When building for a particular product, it’s often useful to have minor variations on what is ultimately the final release build. These are the currently-defined “flavors” or “types” (we need to settle on a real name for these).</p>
<h4 id="eng"><a href="#eng" class="headerlink" title="eng"></a>eng</h4><p>This is the default flavor. A plain “make” is the same as “make eng”. droid is an alias for eng.</p>
<ul>
<li>Installs modules tagged with: eng, debug, shell_$(TARGET_SHELL), user, and/or development.</li>
<li>Installs non-APK modules that have no tags specified.<br>Installs APKs according to the product definition files, in addition to tagged APKs.</li>
<li>ro.secure=0</li>
<li>ro.debuggable=1</li>
<li>ro.kernel.android.checkjni=1</li>
<li>adb is enabled by default.</li>
</ul>
<h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p><code>make user</code></p>
<p>This is the flavor intended to be the final release bits.</p>
<ul>
<li>Installs modules tagged with shell_$(TARGET_SHELL) and user.</li>
<li>Installs non-APK modules that have no tags specified.</li>
<li>Installs APKs according to the product definition files; tags are ignored for APK modules.</li>
<li>ro.secure=1</li>
<li>ro.debuggable=0</li>
<li>adb is disabled by default.</li>
</ul>
<h4 id="userdebug"><a href="#userdebug" class="headerlink" title="userdebug"></a>userdebug</h4><p><code>make userdebug</code><br>The same as user, except:</p>
<ul>
<li>Also installs modules tagged with debug.</li>
<li>ro.debuggable=1</li>
<li>adb is enabled by default.</li>
</ul>
<h3 id="adb_shell"><a href="#adb_shell" class="headerlink" title="adb shell"></a>adb shell</h3><p>以上是adb root权限相关的介绍。下面介绍怎么禁用设备的adb，也即是使得 adb shell失效，无法进入。</p>
<h4 id="u521D_u6B65_u65B9_u6848_u5B9E_u73B0"><a href="#u521D_u6B65_u65B9_u6848_u5B9E_u73B0" class="headerlink" title="初步方案实现"></a>初步方案实现</h4><blockquote>
<p>经过一段时间资料查找，adb shell的开关状态跟usb端口有关。可以通过<code>getprop</code>获取系统相关参数查看usb以及adb的状态。</p>
</blockquote>
<p><code>adb shell getprop &gt; prop.txt</code>将系统property的读取并写入prop.txt。usb控制adb的相应参数如下：</p>
<blockquote>
<pre><code>`[sys.usb.config]: [mass_storage,adb]`
`[persist.sys.usb.config]: [mass_storage,adb]`
</code></pre></blockquote>
<p><code>sys.usb.config</code>为不可修改的，如果需要改动，只能去写<code>persist.sys.usb.config</code>的值。<br><code>adb shell setprop persist.sys.usb.config mass_storage,adb</code>的形式可以为<code>persist.sys.usb.config</code>赋值，需要关闭adb只需将 <code>mass_storage,adb</code>改为<code>mass_storage,none</code>即可。</p>
<p><strong>ps: 注意adb关闭（none）后需要重启才能生效。</strong></p>
<h5 id="u5F00_u542Fadb_uFF1A"><a href="#u5F00_u542Fadb_uFF1A" class="headerlink" title="开启adb："></a>开启adb：</h5><blockquote>
<p>adb shell setprop persist.sys.usb.config mass_storage,adb</p>
</blockquote>
<h5 id="u5173_u95EDadb_uFF1A"><a href="#u5173_u95EDadb_uFF1A" class="headerlink" title="关闭adb："></a>关闭adb：</h5><blockquote>
<p>adb shell setprop persist.sys.usb.config mass_storage,none<br>adb reboot</p>
</blockquote>
<p>上面给出的方法可以有效的对adb进行开启关闭，但有一个不足的，adb一但关闭就不可再开启。因为adb关闭之后就无法再进入<code>adb shell</code>对设备进行adb命令操作，需要谨慎操作。</p>
<h4 id="u4F18_u5316_u65B9_u6848"><a href="#u4F18_u5316_u65B9_u6848" class="headerlink" title="优化方案"></a>优化方案</h4><p>由于上面所述方式存在很大的不足，现针对方案进行优化。通过代码的方式，对adb进行开关控制。<br>写一个demo app，设置一个开关，对adb进行开关控制。</p>
<h5 id="u4EE3_u7801_u5F00_u542Fadb_uFF1A"><a href="#u4EE3_u7801_u5F00_u542Fadb_uFF1A" class="headerlink" title="代码开启adb："></a>代码开启adb：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemProperties.set(<span class="string">"persist.sys.usb.config"</span>, <span class="string">"mass_storage,adb"</span>);</span><br></pre></td></tr></table></figure>
<h5 id="u4EE3_u7801_u5173_u95EDadb_uFF1A"><a href="#u4EE3_u7801_u5173_u95EDadb_uFF1A" class="headerlink" title="代码关闭adb："></a>代码关闭adb：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemProperties.set(<span class="string">"persist.sys.usb.config"</span>, <span class="string">"mass_storage,none"</span>);</span><br></pre></td></tr></table></figure>
<p>代码关闭adb之后仍需重启系统才能生效，附带上重启系统的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rebootSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"rebootSystem"</span>);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_REBOOT);</span><br><span class="line">        intent.putExtra(<span class="string">"nowait"</span>, <span class="number">1</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"interval"</span>, <span class="number">1</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"window"</span>, <span class="number">0</span>);</span><br><span class="line">        mContext.sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>SystemProperties</code>类不对外开放，是Android的隐藏类，该app需要将源码放到aosp中去编译生成镜像再烧录。还需要注意的是，该app需要取得系统核心权限，AndroidManifest.xml中添加<br><code>android:sharedUserId=&quot;android.uid.system&quot;</code>，Android.mk申请<code>platform</code>权限，<code>LOCAL_CERTIFICATE := platform</code>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android设备adb root权限控制以及 adb shell的开关控制。</p>]]>
    
    </summary>
    
      <category term="ADB" scheme="llooper.space/tags/ADB/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="Android" scheme="llooper.space/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ *.jar odex has stale dependencies]]></title>
    <link href="llooper.space/2016/05/10/jar-odex-has-stale-dependencies/"/>
    <id>llooper.space/2016/05/10/jar-odex-has-stale-dependencies/</id>
    <published>2016-05-10T12:55:02.000Z</published>
    <updated>2016-05-10T13:01:36.000Z</updated>
    <content type="html"><![CDATA[<p>修改Android系统签名过程遇到的问题以及解决方法，主要是签名修改之后，编译烧录之后的img报了 <code>*.jar odex has stale dependencies</code>的错误。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I/dalvikvm(  <span class="number">621</span>): DexOpt: Some deps went away</span><br><span class="line">E/dalvikvm(  <span class="number">621</span>): /system/framework/android.policy.jar odex has stale dependencies</span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): Zip is good, but no classes.dex inside, and no valid .odex file in the same directory</span><br><span class="line">D/dalvikvm(  <span class="number">621</span>): Unable to process classpath element <span class="string">'/system/framework/android.policy.jar'</span></span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): DexOpt: Some deps went away</span><br><span class="line">E/dalvikvm(  <span class="number">621</span>): /system/framework/services.jar odex has stale dependencies</span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): Zip is good, but no classes.dex inside, and no valid .odex file in the same directory</span><br><span class="line">D/dalvikvm(  <span class="number">621</span>): Unable to process classpath element <span class="string">'/system/framework/services.jar'</span></span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): DexOpt: Some deps went away</span><br><span class="line">E/dalvikvm(  <span class="number">621</span>): /system/framework/apache-xml.jar odex has stale dependencies</span><br><span class="line">I/dalvikvm(  <span class="number">621</span>): Zip is good, but no classes.dex inside, and no valid .odex file in the same directory</span><br><span class="line">D/dalvikvm(  <span class="number">621</span>): Unable to process classpath element <span class="string">'/system/framework/apache-xml.jar'</span></span><br></pre></td></tr></table></figure>
<p>主要错误情况如上所示，表现为 jar包 odex has stale dependencies。经过网上查找资料以及分析之后得出结论。<br>原因是<code>build/core/dex_preopt.mk</code>里面的宏<code>DEXPREOPT_BOOT_JARS</code>和<code>init.rc</code>里面的宏BOOTCLASSPATH所赋值的包的位置不一样，把它们对应起来就解决了。</p>
<p>上面<code>DEXPREOPT_BOOT_JARS</code>不一定定义在<code>dex_preopt.mk</code>文件中，需要根据你当前的系统进行分析。主要找准了 <code>DEXPREOPT_BOOT_JARS</code>定义的位置，以及 <code>init.rc</code>中的位置，<code>init.rc</code>中的<code>DEXPREOPT_BOOT_JARS</code>也有可能在<code>init.environment.rc</code>中。将俩边的jar包的顺序以及文件名称对应上就可以。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>修改Android系统签名过程遇到的问题以及解决方法，主要是签名修改之后，编译烧录之后的img报了 <code>*.jar odex has stale dependencies</code>的错误。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="Android" scheme="llooper.space/categories/Android/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/Android/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android ActivityManager MOVE_TASK_WITH_HOME]]></title>
    <link href="llooper.space/2016/05/10/Android-ActivityManager-MOVE-TASK-WITH-HOME/"/>
    <id>llooper.space/2016/05/10/Android-ActivityManager-MOVE-TASK-WITH-HOME/</id>
    <published>2016-05-10T12:43:06.000Z</published>
    <updated>2016-05-10T12:53:02.000Z</updated>
    <content type="html"><![CDATA[<p>ActivityManager的flag MOVE_TASK_WITH_HOME分析</p>
<a id="more"></a>
<p><code>MOVE_TASK_WITH_HOME</code>作为一个flag定义于ActivityManager中。主要是做为<code>moveTaskToFront()</code>的一个参数。</p>
<p>/**   </p>
<ul>
<li>Flag for {@link #moveTaskToFront(int, int)}: also move the “home”   </li>
<li>activity along with the task, so it is positioned immediately behind   </li>
<li><p>the task.<br>*/</p>
<p>   public static final int MOVE_TASK_WITH_HOME = 0x00000001;</p>
</li>
</ul>
<p>从命名跟代码中的注释就可以了解到，设置了这个flag，那么在将这个task移到栈的顶部时，home的task也要相应的往上移动，移到顶部task的下面。</p>
<p>那么当设置了这个flag的task移到栈的顶部后，栈中task的顺序应该如下：</p>
<table>
<thead>
<tr>
<th>task</th>
</tr>
</thead>
<tbody>
<tr>
<td>home</td>
</tr>
<tr>
<td>task1</td>
</tr>
<tr>
<td>…….</td>
</tr>
</tbody>
</table>
<p>task has flag <code>MOVE_TASK_WITH_HOME</code></p>
<p>那么在按back键时，task退出，home在task之下，应该resume home。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ActivityManager的flag MOVE_TASK_WITH_HOME分析</p>]]>
    
    </summary>
    
      <category term="ActivityManager" scheme="llooper.space/tags/ActivityManager/"/>
    
      <category term="Android" scheme="llooper.space/categories/Android/"/>
    
      <category term="ActivityManager" scheme="llooper.space/categories/Android/ActivityManager/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SystemUI之RecentsApp篇（一）]]></title>
    <link href="llooper.space/2016/03/16/recents/"/>
    <id>llooper.space/2016/03/16/recents/</id>
    <published>2016-03-16T14:35:19.000Z</published>
    <updated>2016-03-16T14:38:42.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本篇主要介绍systemui的主要组成部分RecentsApp也就是最近任务列表的启动流程。</p>
</blockquote>
<a id="more"></a>
<p>下面主要涉及到的文件的路径汇总：<br><code>framework/base/services/input/InputReader.cpp</code><br><code>framework/base/services/input/InputDispatcher.cpp</code><br><code>framework/base/services/java/com/android/server/input/InputManagerService.java</code><br><code>framework/base/services/java/com/android/server/am/ActivityManagerService.java</code><br><code>framework/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java</code><br><code>framework/base/services/java/com/android/sever/StatusBarManagerService.java</code><br><code>framework/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java</code>    </p>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>本篇主要介绍RecentsApp的俩种启动方式，风别为：<br>1) <code>adb shell input keyevent KEYCODE_APP_SWITCH</code><br>2) <code>NavigationBar</code>   </p>
<h3 id="adb_u542F_u52A8"><a href="#adb_u542F_u52A8" class="headerlink" title="adb启动"></a>adb启动</h3><h4 id="u8F93_u5165_u6D41_u7A0B"><a href="#u8F93_u5165_u6D41_u7A0B" class="headerlink" title="输入流程"></a>输入流程</h4><p>先从adb启动介绍开始。Android的keyevent的输入事件在此就不过多介绍，简要的过一下流程。先是发送某一个KeyEvent，<code>InputReader.cpp</code>读取输入事件，交给<code>InputDispatcher.cpp</code>，它负责事件的处理以及分发。然后转交给Java framework层的<code>IMS</code>，<code>IMS</code>处理过后转交给<code>AMS</code>，<code>AMS</code>继续往上层传递到<code>PhoneWindowManager</code>，这是一个Android framework层中一个极其重要的类，它管理着Android全部窗口策略，以及按键事件的分发处理。</p>
<h4 id="PhoneWindowManager"><a href="#PhoneWindowManager" class="headerlink" title="PhoneWindowManager"></a>PhoneWindowManager</h4><p><code>PhoneWindowManager.java</code>接收到<code>KEYCODE_APP_SWITCH</code>事件后做了如下操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_APP_SWITCH) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!keyguardOn) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (down &amp;&amp; repeatCount == <span class="number">0</span>) &#123;</span><br><span class="line">			preloadRecentApps();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!down) &#123;</span><br><span class="line">			toggleRecentApps();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>keyguardOn</code>是用来判断当前是否处于锁屏状态，从上边的if块中明显可以看出，<code>KEYCODE_APP_SWITCH</code> down的时候调用了<code>preloadRecentApps()</code>，up的时候调用了<code>toggleRecentApps()</code>，顺序显然是先preload再toggle。<br>转去分析这俩个函数，看看分别做了什么操作，它们的实现同样位于<code>PhoneWindowManager</code>中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preloadRecentApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mPreloadedRecentApps = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           IStatusBarService statusbar = getStatusBarService();</span><br><span class="line">           <span class="keyword">if</span> (statusbar != <span class="keyword">null</span>) &#123;</span><br><span class="line">               statusbar.preloadRecentApps();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">           Slog.e(TAG, <span class="string">"RemoteException when preloading recent apps"</span>, e);</span><br><span class="line">           <span class="comment">// re-acquire status bar service next time it is needed.</span></span><br><span class="line">           mStatusBarService = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toggleRecentApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mPreloadedRecentApps = <span class="keyword">false</span>; <span class="comment">// preloading no longer needs to be canceled</span></span><br><span class="line">    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_RECENT_APPS);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IStatusBarService statusbar = getStatusBarService();</span><br><span class="line">        <span class="keyword">if</span> (statusbar != <span class="keyword">null</span>) &#123;</span><br><span class="line">            statusbar.toggleRecentApps();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"RemoteException when showing recent apps"</span>, e);</span><br><span class="line">        <span class="comment">// re-acquire status bar service next time it is needed.</span></span><br><span class="line">        mStatusBarService = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>俩个函数使用了同样的一个<code>IStatusBarService</code>，去看看import，找出了它的路径为：<br><code>import com.android.internal.statusbar.IStatusBarService;</code><br>而且<code>getStatusBarService()</code>的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IStatusBarService <span class="title">getStatusBarService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mServiceAquireLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatusBarService == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mStatusBarService = IStatusBarService.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(<span class="string">"statusbar"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mStatusBarService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可知<code>IStatusBarService</code>是一个<code>AIDL</code>，在<code>PhoneWindowManager</code>中获取到一个实例，与之跨进程进行通信。从名字顺藤摸瓜，找到services下的<code>StatusBarManagerService</code>，就是此AIDL的java实现。</p>
<h4 id="StatusBarManagerService"><a href="#StatusBarManagerService" class="headerlink" title="StatusBarManagerService"></a>StatusBarManagerService</h4><h3 id="NavigationBar"><a href="#NavigationBar" class="headerlink" title="NavigationBar"></a>NavigationBar</h3>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本篇主要介绍systemui的主要组成部分RecentsApp也就是最近任务列表的启动流程。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="android" scheme="llooper.space/tags/android/"/>
    
      <category term="framework" scheme="llooper.space/tags/framework/"/>
    
      <category term="systemui" scheme="llooper.space/tags/systemui/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于ARGB_8888、ALPHA_8、ARGB_4444、RGB_565的理解]]></title>
    <link href="llooper.space/2016/03/16/ARGB_8888%E7%AD%89%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>llooper.space/2016/03/16/ARGB_8888等的理解/</id>
    <published>2016-03-16T14:31:19.000Z</published>
    <updated>2016-03-16T14:33:27.000Z</updated>
    <content type="html"><![CDATA[<p>A：透明度</p>
<p>R：红色</p>
<p>G：绿</p>
<p>B：蓝</p>
<p><code>Bitmap.Config ARGB_4444</code>：每个像素占四位，即A=4，R=4，G=4，B=4，那么一个像素点占4+4+4+4=16位 </p>
<p><code>Bitmap.Config ARGB_8888</code>：每个像素占四位，即A=8，R=8，G=8，B=8，那么一个像素点占8+8+8+8=32位</p>
<p><code>Bitmap.Config RGB_565</code>：每个像素占四位，即R=5，G=6，B=5，没有透明度，那么一个像素点占5+6+5=16位</p>
<p><code>Bitmap.Config ALPHA_8</code>：每个像素占四位，只有透明度，没有颜色。</p>
<p>一般情况下我们都是使用的<code>ARGB_8888</code>，由此可知它是最占内存的，因为一个像素占32位，8位=1字节，所以一个像素占4字节的内存。假设有一张480x800的图片，如果格式为<code>ARGB_8888</code>，那么将会占用1500KB的内存。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A：透明度</p>
<p>R：红色</p>
<p>G：绿</p>
<p>B：蓝</p>
<p><code>Bitmap.Config ARGB_4444</code>：每个像素占四位，即A=4，R=4，G=4，B=4，那么一个像素点占4+4+4+4=16位 </p>
<p>]]>
    </summary>
    
      <category term="ARGB_8888" scheme="llooper.space/tags/ARGB-8888/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="Android" scheme="llooper.space/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[adb shell monkey 基本命令整合]]></title>
    <link href="llooper.space/2016/03/07/adb-shell-monkey/"/>
    <id>llooper.space/2016/03/07/adb-shell-monkey/</id>
    <published>2016-03-07T13:02:26.000Z</published>
    <updated>2016-03-07T13:12:33.000Z</updated>
    <content type="html"><![CDATA[<p>主要整个Android测试工具monkey测试的基本命令以及用法。   </p>
<a id="more"></a>
<h3 id="u53C2_u6570_u8BF4_u660E"><a href="#u53C2_u6570_u8BF4_u660E" class="headerlink" title="参数说明"></a>参数说明</h3><p>配置好adb环境后，接入设备，在terminal中输入 <code>adb shell monkey</code>就可以看到monkey的列出的各个参数，现对各个参数进行说明。</p>
<p>monkey是通过package name去识别应该执行哪些apk。全部package name可通过adb shell进入设备terminal模式，cd 到 /data/data/查看。</p>
<p><code>–-pkg-blacklist-file</code> 黑名单列表，顾名思义，自然就是黑名单，monkey不执行的列表。使用方法，编写列表文件,列表中添加的是 package name，然后通过adb push 到设备中，例如 ： <code>monkey –-pkg-blacklist-file /data/blacklist.txt</code><br><code>–pkg-whitelist-file</code> 同上，此为白名单列表，即只执行列表中的package name的apk文件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要整个Android测试工具monkey测试的基本命令以及用法。   </p>]]>
    
    </summary>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="monkey" scheme="llooper.space/categories/monkey/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android adb input keyevent  "keycode"]]></title>
    <link href="llooper.space/2016/03/07/Android-adb-keyevent-input-keycode/"/>
    <id>llooper.space/2016/03/07/Android-adb-keyevent-input-keycode/</id>
    <published>2016-03-07T12:54:03.000Z</published>
    <updated>2016-03-30T02:31:06.000Z</updated>
    <content type="html"><![CDATA[<p>Andorid adb input keyevent “keycode”整理，方便terminal输入Androidkeyevent事件。</p>
<a id="more"></a>
<h4 id="adb__u8F93_u5165keyevent_u4E8B_u4EF6_u4F8B_u5B50_uFF1A"><a href="#adb__u8F93_u5165keyevent_u4E8B_u4EF6_u4F8B_u5B50_uFF1A" class="headerlink" title="adb 输入keyevent事件例子："></a>adb 输入keyevent事件例子：</h4><p>adb input keyevent 66<br>adb input keyevent KEYCODE_ENTER<br>主要有以上俩种形式，当然，数字比较多记起来繁琐，整理网络上的一些汇总成为此篇page。   </p>
<h4 id="KeyCode_u6574_u7406"><a href="#KeyCode_u6574_u7406" class="headerlink" title="KeyCode整理"></a>KeyCode整理</h4><p>0 –&gt;  “KEYCODE_UNKNOWN”<br>1 –&gt;  “KEYCODE_MENU”<br>2 –&gt;  “KEYCODE_SOFT_RIGHT”<br>3 –&gt;  “KEYCODE_HOME”<br>4 –&gt;  “KEYCODE_BACK”<br>5 –&gt;  “KEYCODE_CALL”<br>6 –&gt;  “KEYCODE_ENDCALL”<br>7 –&gt;  “KEYCODE_0”<br>8 –&gt;  “KEYCODE_1”<br>9 –&gt;  “KEYCODE_2”<br>10 –&gt;  “KEYCODE_3”<br>11 –&gt;  “KEYCODE_4”<br>12 –&gt;  “KEYCODE_5”<br>13 –&gt;  “KEYCODE_6”<br>14 –&gt;  “KEYCODE_7”<br>15 –&gt;  “KEYCODE_8”<br>16 –&gt;  “KEYCODE_9”<br>17 –&gt;  “KEYCODE_STAR”         *<br>18 –&gt;  “KEYCODE_POUND”        #<br>19 –&gt;  “KEYCODE_DPAD_UP”      上<br>20 –&gt;  “KEYCODE_DPAD_DOWN”    下<br>21 –&gt;  “KEYCODE_DPAD_LEFT”   58 21左<br>22 –&gt;  “KEYCODE_DPAD_RIGHT”  57 22右<br>23 –&gt;  “KEYCODE_DPAD_CENTER”<br>24 –&gt;  “KEYCODE_VOLUME_UP”<br>25 –&gt;  “KEYCODE_VOLUME_DOWN”<br>26 –&gt;  “KEYCODE_POWER”<br>29 –&gt;  “KEYCODE_A”<br>30 –&gt;  “KEYCODE_B”<br>31 –&gt;  “KEYCODE_C”<br>32 –&gt;  “KEYCODE_D”<br>33 –&gt;  “KEYCODE_E”<br>34 –&gt;  “KEYCODE_F”<br>35 –&gt;  “KEYCODE_G”<br>36 –&gt;  “KEYCODE_H”<br>37 –&gt;  “KEYCODE_I”<br>38 –&gt;  “KEYCODE_J”<br>39 –&gt;  “KEYCODE_K”<br>40 –&gt;  “KEYCODE_L”<br>41 –&gt;  “KEYCODE_M”<br>42 –&gt;  “KEYCODE_N”<br>43 –&gt;  “KEYCODE_O”<br>44 –&gt;  “KEYCODE_P”<br>45 –&gt;  “KEYCODE_Q”<br>46 –&gt;  “KEYCODE_R”<br>47 –&gt;  “KEYCODE_S”<br>48 –&gt;  “KEYCODE_T”<br>49 –&gt;  “KEYCODE_U”<br>50 –&gt;  “KEYCODE_V”<br>51 –&gt;  “KEYCODE_W”<br>52 –&gt;  “KEYCODE_X”<br>53 –&gt;  “KEYCODE_Y”<br>54 –&gt;  “KEYCODE_Z”<br>55 –&gt;  “KEYCODE_COMMA”       ，<br>56 –&gt;  “KEYCODE_PERIOD”      。<br>57 –&gt;  “KEYCODE_ALT_LEFT”<br>58 –&gt;  “KEYCODE_ALT_RIGHT”<br>59 –&gt;  “KEYCODE_SHIFT_LEFT”<br>60 –&gt;  “KEYCODE_SHIFT_RIGHT”<br>61 –&gt;  “KEYCODE_TAB”<br>62 –&gt;  “KEYCODE_SPACE”<br>63 –&gt;  “KEYCODE_SYM”<br>64 –&gt;  “KEYCODE_EXPLORER”<br>65 –&gt;  “KEYCODE_ENVELOPE”<br>66 –&gt;  “KEYCODE_ENTER”<br>67 –&gt;  “KEYCODE_DEL”<br>68 –&gt;  “KEYCODE_GRAVE”<br>69 –&gt;  “KEYCODE_MINUS”<br>70 –&gt;  “KEYCODE_EQUALS”         =<br>71 –&gt;  “KEYCODE_LEFT_BRACKET”   []<br>72 –&gt;  “KEYCODE_RIGHT_BRACKET”  []<br>73 –&gt;  “KEYCODE_BACKSLASH”<br>74 –&gt;  “KEYCODE_SEMICOLON”       ;<br>75 –&gt;  “KEYCODE_APOSTROPHE”<br>76 –&gt;  “KEYCODE_SLASH”           /<br>77 –&gt;  “KEYCODE_AT”              @<br>78 –&gt;  “KEYCODE_NUM”<br>79 –&gt;  “KEYCODE_HEADSETHOOK”<br>80 –&gt;  “KEYCODE_FOCUS”<br>81 –&gt;  “KEYCODE_PLUS”<br>82 –&gt;  “KEYCODE_MENU”            menu<br>83 –&gt;  “KEYCODE_NOTIFICATION”     notification bar<br>84 –&gt;  “KEYCODE_SEARCH”<br>85 –&gt;  “TAG_LAST_KEYCODE”</p>
<blockquote>
<p>ps: 以上仅仅列出了部分常用的</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Andorid adb input keyevent “keycode”整理，方便terminal输入Androidkeyevent事件。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android系统服务汇总列表]]></title>
    <link href="llooper.space/2016/01/05/Android-system-services/"/>
    <id>llooper.space/2016/01/05/Android-system-services/</id>
    <published>2016-01-05T01:50:46.000Z</published>
    <updated>2016-01-05T01:57:20.000Z</updated>
    <content type="html"><![CDATA[<p>业务对Android系统开机时间提出了需求，为了使得开机时间剪短，需要对系统service进行一些优化，去掉某部分使用不到的功能。现将<code>SystemServer</code>初始化阶段添加到<code>ServiceManager</code>中的服务进行一个汇总以及分析，给优化提供参照。</p>
<a id="more"></a>
<h2 id="Android__u7CFB_u7EDFservice_u5217_u8868"><a href="#Android__u7CFB_u7EDFservice_u5217_u8868" class="headerlink" title="Android 系统service列表"></a>Android 系统service列表</h2><h4 id="1-PowerManagerService"><a href="#1-PowerManagerService" class="headerlink" title="1.PowerManagerService"></a>1.PowerManagerService</h4><blockquote>
<p>主要是计算系统中和Power相关的计算，然后决策系统应该如何反应。同时协调Power如何与系统其它模块的交互，比如在待机的时候关掉不用的设备，待机时屏幕和键盘背光的关闭，用户操作的时候该打开多少设备等等。   </p>
</blockquote>
<h4 id="2-ActivityManagerService"><a href="#2-ActivityManagerService" class="headerlink" title="2.ActivityManagerService"></a>2.ActivityManagerService</h4><blockquote>
<p>这个是整个Android framework框架中最为核心的一个服务，管理整个框架中任务、进程管理, Intent解析等的核心实现。虽然名为Activity的Manager Service，但它管辖的范围，不只是Activity，还有其他三大组件，和它们所在的进程。也就是说用户应用程序的生命管理，都是由他负责的。</p>
</blockquote>
<h4 id="3-DisplayManagerService"><a href="#3-DisplayManagerService" class="headerlink" title="3.DisplayManagerService"></a>3.DisplayManagerService</h4><blockquote>
<p>用于管理全局显示生命周期，决定在已连接的物理设备如何配置逻辑显示，并且通知系统和应用状态的改变。ANDROID从版本4.2开始提供了一个显示管理服务 DisplayManagerService,支持多种显示类型的多个显示器的镜像显示，包括内建的显示类型（本地）、HDMI显示类型以及支持WIFI Display 协议( MIRACAST)，实现本地设备在远程显示器上的镜像显示。</p>
</blockquote>
<h4 id="4-TelephonyRegistry"><a href="#4-TelephonyRegistry" class="headerlink" title="4.TelephonyRegistry"></a>4.TelephonyRegistry</h4><blockquote>
<p>提供电话注册、管理服务，可以获取电话的链接状态、信号强度等等。</p>
</blockquote>
<h4 id="5-SchedulingPolicyService"><a href="#5-SchedulingPolicyService" class="headerlink" title="5.SchedulingPolicyService"></a>5.SchedulingPolicyService</h4><blockquote>
<p>调度策略。</p>
</blockquote>
<h4 id="6-PackageManagerService"><a href="#6-PackageManagerService" class="headerlink" title="6.PackageManagerService"></a>6.PackageManagerService</h4><blockquote>
<p>Android framework框架核心服务，用于APK的解析、权限验证、安装等。</p>
</blockquote>
<h4 id="7-EntropyMixer"><a href="#7-EntropyMixer" class="headerlink" title="7.EntropyMixer"></a>7.EntropyMixer</h4><blockquote>
<p>熵服务，周期性的加载和保存随机信息。主要是linux开机后，/dev/random的状态可能是可预知的，这样一些需要随机信息的应用程序就可能会有问题。这个无需提供应用程序接口。</p>
</blockquote>
<h4 id="8-UserManagerService"><a href="#8-UserManagerService" class="headerlink" title="8.UserManagerService"></a>8.UserManagerService</h4><blockquote>
<p>USB Host和device管理服务。</p>
</blockquote>
<h4 id="9-AccountManagerService"><a href="#9-AccountManagerService" class="headerlink" title="9.AccountManagerService"></a>9.AccountManagerService</h4><blockquote>
<p>Android账户服务，提供了对账户、密码、授权的集中管理。</p>
</blockquote>
<h4 id="10-ContentService"><a href="#10-ContentService" class="headerlink" title="10.ContentService"></a>10.ContentService</h4><blockquote>
<p>内容服务，主要是数据库等提供解决方法的服务。</p>
</blockquote>
<h4 id="11-LightsService"><a href="#11-LightsService" class="headerlink" title="11.LightsService"></a>11.LightsService</h4><blockquote>
<p>光感应传感器服务。</p>
</blockquote>
<h4 id="12-BatteryService"><a href="#12-BatteryService" class="headerlink" title="12.BatteryService"></a>12.BatteryService</h4><blockquote>
<p>负责监控电池的充电状态、电池电量、电压、温度等信息，当电池信息发生变化时，发生广播通知其他关系电池信息的进程和服务。</p>
</blockquote>
<h4 id="13-VibratorService"><a href="#13-VibratorService" class="headerlink" title="13.VibratorService"></a>13.VibratorService</h4><blockquote>
<p>振动器服务。</p>
</blockquote>
<h4 id="14-ConsumerIrService"><a href="#14-ConsumerIrService" class="headerlink" title="14.ConsumerIrService"></a>14.ConsumerIrService</h4><blockquote>
<p>远程控制，通过红外等控制周围的设备（例如电视等）</p>
</blockquote>
<h4 id="15-AlarmManagerService"><a href="#15-AlarmManagerService" class="headerlink" title="15.AlarmManagerService"></a>15.AlarmManagerService</h4><blockquote>
<p>提供闹铃和定时器等功能。</p>
</blockquote>
<h4 id="16-Init_Watchdog"><a href="#16-Init_Watchdog" class="headerlink" title="16.Init Watchdog"></a>16.Init Watchdog</h4><blockquote>
<p>1).接收系统内部reboot请求,重启系统。2).监护SystemServer进程,防止系统死锁。</p>
</blockquote>
<h4 id="17-WindowManagerService"><a href="#17-WindowManagerService" class="headerlink" title="17.WindowManagerService"></a>17.WindowManagerService</h4><blockquote>
<p>Android framework框架核心服务，窗口管理服务。这里最核心的就是输入事件的分发和管理。</p>
</blockquote>
<h4 id="18-BluetoothManagerService"><a href="#18-BluetoothManagerService" class="headerlink" title="18.BluetoothManagerService"></a>18.BluetoothManagerService</h4><blockquote>
<p>负责蓝牙后台管理和服务。</p>
</blockquote>
<h4 id="19-InputManagerService"><a href="#19-InputManagerService" class="headerlink" title="19.InputManagerService"></a>19.InputManagerService</h4><blockquote>
<p>以前在WindowManagerService中，现在独立了出来，用户处理事件分发。</p>
</blockquote>
<h4 id="20-AccessibilityManagerService"><a href="#20-AccessibilityManagerService" class="headerlink" title="20.AccessibilityManagerService"></a>20.AccessibilityManagerService</h4><blockquote>
<p>辅助管理程序截获所有的用户输入，并根据这些输入给用户一些额外的反馈，起到辅助的效果，View的点击、焦点等事件分发管理服。</p>
</blockquote>
<h4 id="21-MountService"><a href="#21-MountService" class="headerlink" title="21.MountService"></a>21.MountService</h4><blockquote>
<p>磁盘加载服务程序，一般要和一个linux daemon程序如vold/mountd等合作起作用，主要负责监听并广播device的mount/unmount/badremoval等等事件。</p>
</blockquote>
<h4 id="22-LockSettingsService"><a href="#22-LockSettingsService" class="headerlink" title="22.LockSettingsService"></a>22.LockSettingsService</h4><blockquote>
<p>和锁屏界面中的输入密码，手势等安全功能有关。可以保存每个user的相关<br>锁屏信息。</p>
</blockquote>
<h4 id="23-DevicePolicyManagerService"><a href="#23-DevicePolicyManagerService" class="headerlink" title="23.DevicePolicyManagerService"></a>23.DevicePolicyManagerService</h4><blockquote>
<p>提供一些系统级别的设置及属性，比如锁屏、恢复出厂设置、设置密码、强制清除密码，修改密码、设置屏幕灯光渐暗时间间隔等操作。</p>
</blockquote>
<h4 id="24-StatusBarManagerService"><a href="#24-StatusBarManagerService" class="headerlink" title="24.StatusBarManagerService"></a>24.StatusBarManagerService</h4><blockquote>
<p>状态栏，与systemui交互。</p>
</blockquote>
<h4 id="25-ClipboardService"><a href="#25-ClipboardService" class="headerlink" title="25.ClipboardService"></a>25.ClipboardService</h4><blockquote>
<p>剪贴板服务。</p>
</blockquote>
<h4 id="26-NetworkManagementService"><a href="#26-NetworkManagementService" class="headerlink" title="26.NetworkManagementService"></a>26.NetworkManagementService</h4><blockquote>
<p>网络管理服务。ANDROID 系统网络连接和管理服务由四个系统服务ConnectivityService、NetworkPolicyManagerService、NetworkManagementService、NetworkStatsService共同配合完成网络连接和管理功能。ConnectivityService、NetworkPolicyManagerService、NetworkStatsService三个服务都通过INetworkManagementService接口跨进程访问NetworkManagementService服务，实现与网络接口的交互及信息读取。</p>
</blockquote>
<h4 id="27-TextServicesManagerService"><a href="#27-TextServicesManagerService" class="headerlink" title="27.TextServicesManagerService"></a>27.TextServicesManagerService</h4><blockquote>
<p>文本服务，例如文本检查等。</p>
</blockquote>
<h4 id="28-NetworkStatsService"><a href="#28-NetworkStatsService" class="headerlink" title="28.NetworkStatsService"></a>28.NetworkStatsService</h4><blockquote>
<p>网络统计相关。</p>
</blockquote>
<h4 id="29-NetworkPolicyManagerService"><a href="#29-NetworkPolicyManagerService" class="headerlink" title="29.NetworkPolicyManagerService"></a>29.NetworkPolicyManagerService</h4><blockquote>
<p>维护网络使用策略。</p>
</blockquote>
<h4 id="30-WifiP2pService"><a href="#30-WifiP2pService" class="headerlink" title="30.WifiP2pService"></a>30.WifiP2pService</h4><blockquote>
<p>Wifi Direct服务。</p>
</blockquote>
<h4 id="31-WifiService"><a href="#31-WifiService" class="headerlink" title="31.WifiService"></a>31.WifiService</h4><blockquote>
<p>Wifi服务。</p>
</blockquote>
<h4 id="32-ConnectivityService"><a href="#32-ConnectivityService" class="headerlink" title="32.ConnectivityService"></a>32.ConnectivityService</h4><blockquote>
<p>网络连接状态服务。</p>
</blockquote>
<h4 id="33-EthernetService"><a href="#33-EthernetService" class="headerlink" title="33.EthernetService"></a>33.EthernetService</h4><blockquote>
<p>以太网服务。</p>
</blockquote>
<h4 id="34-NsdService"><a href="#34-NsdService" class="headerlink" title="34.NsdService"></a>34.NsdService</h4><blockquote>
<p>网络服务搜索。</p>
</blockquote>
<h4 id="35-UpdateLockService"><a href="#35-UpdateLockService" class="headerlink" title="35.UpdateLockService"></a>35.UpdateLockService</h4><blockquote>
<p>4.1新增，提供升级锁，Advisory wakelock-like mechanism by which processes that should not be interrupted for OTA/update purposes can so advise the OS.</p>
</blockquote>
<h4 id="36-NotificationManagerService"><a href="#36-NotificationManagerService" class="headerlink" title="36.NotificationManagerService"></a>36.NotificationManagerService</h4><blockquote>
<p>通知栏管理服务</p>
</blockquote>
<h4 id="37-DeviceStorageMonitorService"><a href="#37-DeviceStorageMonitorService" class="headerlink" title="37.DeviceStorageMonitorService"></a>37.DeviceStorageMonitorService</h4><blockquote>
<p>磁盘空间状态检测服务 </p>
</blockquote>
<h4 id="38-LocationManagerService"><a href="#38-LocationManagerService" class="headerlink" title="38.LocationManagerService"></a>38.LocationManagerService</h4><blockquote>
<p>磁盘空间状态检测服务 </p>
</blockquote>
<h4 id="39-CountryDetectorService"><a href="#39-CountryDetectorService" class="headerlink" title="39.CountryDetectorService"></a>39.CountryDetectorService</h4><blockquote>
<p>检查当前用户所在的国家</p>
</blockquote>
<h4 id="40-SearchManagerService"><a href="#40-SearchManagerService" class="headerlink" title="40.SearchManagerService"></a>40.SearchManagerService</h4><blockquote>
<p>搜索管理服务</p>
</blockquote>
<h4 id="41-DropBoxManagerService"><a href="#41-DropBoxManagerService" class="headerlink" title="41.DropBoxManagerService"></a>41.DropBoxManagerService</h4><blockquote>
<p>系统日志文件管理服务，通过该服务访问Linux层面的Dropbox程序</p>
</blockquote>
<h4 id="42-WallpaperManagerService"><a href="#42-WallpaperManagerService" class="headerlink" title="42.WallpaperManagerService"></a>42.WallpaperManagerService</h4><blockquote>
<p>壁纸管理服务</p>
</blockquote>
<h4 id="43-AudioService"><a href="#43-AudioService" class="headerlink" title="43.AudioService"></a>43.AudioService</h4><blockquote>
<p>音频管理服务</p>
</blockquote>
<h4 id="44-UsbService"><a href="#44-UsbService" class="headerlink" title="44.UsbService"></a>44.UsbService</h4><blockquote>
<p>USB服务</p>
</blockquote>
<h4 id="45-SerialService"><a href="#45-SerialService" class="headerlink" title="45.SerialService"></a>45.SerialService</h4><blockquote>
<p>串口服务，可支持对串口的设备进行操作</p>
</blockquote>
<h4 id="46-TwilightService"><a href="#46-TwilightService" class="headerlink" title="46.TwilightService"></a>46.TwilightService</h4><blockquote>
<p>指出用户当前所在位置是否为晚上，被UiModeManager等用来调整夜间模式。</p>
</blockquote>
<h4 id="47-UiModeManagerService"><a href="#47-UiModeManagerService" class="headerlink" title="47.UiModeManagerService"></a>47.UiModeManagerService</h4><blockquote>
<p>管理当前Android设备的夜间模式和行车模式</p>
</blockquote>
<h4 id="48-BackupManagerService"><a href="#48-BackupManagerService" class="headerlink" title="48.BackupManagerService"></a>48.BackupManagerService</h4><blockquote>
<p>系统备份服务</p>
</blockquote>
<h4 id="49-AppWidgetService"><a href="#49-AppWidgetService" class="headerlink" title="49.AppWidgetService"></a>49.AppWidgetService</h4><blockquote>
<p>Android可以让用户写的程序以widget的方式放在桌面上，这就是这套管理和服务的接口</p>
</blockquote>
<h4 id="50-RecognitionManagerService"><a href="#50-RecognitionManagerService" class="headerlink" title="50.RecognitionManagerService"></a>50.RecognitionManagerService</h4><blockquote>
<p>身份识别服务</p>
</blockquote>
<h4 id="51-DiskStatsService"><a href="#51-DiskStatsService" class="headerlink" title="51.DiskStatsService"></a>51.DiskStatsService</h4><blockquote>
<p>磁盘统计服务</p>
</blockquote>
<h4 id="52-SamplingProfilerService"><a href="#52-SamplingProfilerService" class="headerlink" title="52.SamplingProfilerService"></a>52.SamplingProfilerService</h4><blockquote>
<p>用于耗时统计等。</p>
</blockquote>
<h4 id="53-NetworkTimeUpdateService"><a href="#53-NetworkTimeUpdateService" class="headerlink" title="53.NetworkTimeUpdateService"></a>53.NetworkTimeUpdateService</h4><blockquote>
<p>监视网络时间，当网络时间变化时更新本地时间。</p>
</blockquote>
<h4 id="54-CommonTimeManagementService"><a href="#54-CommonTimeManagementService" class="headerlink" title="54.CommonTimeManagementService"></a>54.CommonTimeManagementService</h4><blockquote>
<p>管理本地常见的时间服务的配置，在网络配置变化时重新配置本地服务。</p>
</blockquote>
<h4 id="55-DreamManagerService"><a href="#55-DreamManagerService" class="headerlink" title="55.DreamManagerService"></a>55.DreamManagerService</h4><blockquote>
<p>屏幕保护。</p>
</blockquote>
<h4 id="56-AssetAtlasService"><a href="#56-AssetAtlasService" class="headerlink" title="56.AssetAtlasService"></a>56.AssetAtlasService</h4><blockquote>
<p>负责将预加载的bitmap组装成纹理贴图，生成的纹理贴图可以被用来跨进程使用，以减少内存。</p>
</blockquote>
<h4 id="57-PrintManagerService"><a href="#57-PrintManagerService" class="headerlink" title="57.PrintManagerService"></a>57.PrintManagerService</h4><blockquote>
<p>打印服务。</p>
</blockquote>
<h4 id="58-MediaRouterService"><a href="#58-MediaRouterService" class="headerlink" title="58.MediaRouterService"></a>58.MediaRouterService</h4><blockquote>
<p>MediaRouterService用于管理各个应用程序的多媒体播放的行为。</p>
</blockquote>
<h4 id="59-WiredAccessoryManager"><a href="#59-WiredAccessoryManager" class="headerlink" title="59.WiredAccessoryManager"></a>59.WiredAccessoryManager</h4><blockquote>
<p>监视手机和底座上的耳机。</p>
</blockquote>
<h4 id="60-KeyguardService"><a href="#60-KeyguardService" class="headerlink" title="60.KeyguardService"></a>60.KeyguardService</h4><blockquote>
<p>锁屏。</p>
</blockquote>
<hr>
<h4 id="JNI_u5C42_u52A0_u8F7D_u7684_u670D_u52A1"><a href="#JNI_u5C42_u52A0_u8F7D_u7684_u670D_u52A1" class="headerlink" title="JNI层加载的服务"></a>JNI层加载的服务</h4><blockquote>
<p>服务类名称    – 作用描述<br>SurfaceFlinger    – Framebuffer的合成和管理服务<br>SensorService – 传感器服务<br>MediaPlayerService    – 提供媒体播放服务，对应的java端接口在mediaplayer.java<br>AudioFlinger – 声音的录播放服务，包括混音等<br>CameraService – 提供camera的录制、preview等功能的服务<br>AudioPolicyService – 主要功能有检查输入输出设备的连接状态及系统的音频策略的切换等<br>DrmManagerService – DRM，英文全称Digital Rights Management, 可以翻译为：数字版权管理。指的是出版者用来控制被保护对象的使用权的一些技术，这些技术保护的有数字化内容（例如：软件、音乐、电影）以及硬件，处理数字化产品的某个实例的使用限制</p>
</blockquote>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>业务对Android系统开机时间提出了需求，为了使得开机时间剪短，需要对系统service进行一些优化，去掉某部分使用不到的功能。现将<code>SystemServer</code>初始化阶段添加到<code>ServiceManager</code>中的服务进行一个汇总以及分析，给优化提供参照。</p>]]>
    
    </summary>
    
      <category term="AOSP" scheme="llooper.space/tags/AOSP/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="frameworks" scheme="llooper.space/tags/frameworks/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
      <category term="Android" scheme="llooper.space/categories/AOSP/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016]]></title>
    <link href="llooper.space/2016/01/01/2016/"/>
    <id>llooper.space/2016/01/01/2016/</id>
    <published>2015-12-31T16:55:11.000Z</published>
    <updated>2016-01-01T12:03:00.000Z</updated>
    <content type="html"><![CDATA[<p>2016的第一篇blog。</p>
<a id="more"></a>
<p>2016的第一篇blog，聊聊2015，聊聊未来，聊聊不知道说什么。。。</p>
<p>跨年跨年，不知道从什么时候开始流行起了跨年这么个说法，跨着跨着一年就过去了，真的好快。<br>今年倒是有着这么一个说法，腿短的不叫跨年，叫蹦，单身狗也不叫跨年，叫熬夜。蹦着熬夜，这么一说我倒还真是适合-_-|||<br>2015-2016也算是改变比较重大的一年了，从学生跨入社会，正式脱离学校生活。7月份毕业至今，仍是一事无成，没有积蓄，挥霍无度。<br>人倒是变得世故了很多，不再那么单纯，那么纠结。<br>在学校是技术渣，出来后还是技术渣，还是无心学习没有搞技术的心思，还是安逸度日。<br>打球的习惯还保持着，就是不知道能持续到何年何日，或许终老吧。骑车呢，好像放弃了一样，虽然还是有着不贴现实的梦想，但感觉已经老了，没有再去破风的念头。<br>工作后从Android的开发者转换到了底层源码中去，研究地蛋都碎了一地。也不知道后续能有什么发展。<br>买了iPhone，换了mac pro，开发条件真的是不可同日而语，有了搞搞ios的心思，也不知道能不能持续下去。还想着搞搞Python的，哎，就是爱瞎折腾。</p>
<p>好像也没有太多好聊的，之后再继续更新吧。</p>
<p>2016的第一天，宅了一天。大半夜买了域名，配了半夜没配好，早上早早爬起来搞了一个上午。中午时分差不多ok，甚为欣慰。<br>下午继续宅，看直播看视频，在平平淡淡中元旦步入夜晚···<br>晚饭呢，感谢某人的盛情款待，东西还挺好吃的，虽然今天确实没有什么食欲，但问题的关键是可以让好心情继续保持呀。<br>一些朋友虽然碰头的机会很少，院长远在帝都，几个在深圳，广州的也都忙着。但总感觉距离不远，一块到处串的情景还特别清晰。有空是该去深圳坑坑正扬了。<br>新的一年的，也有些小小的憧憬吧，希望能继续好好的发展下去，有一点点好感，祝福。。。<br>个性比较浪，问我喜不喜欢，心动了，你说能不喜欢么。<br>还没萌芽的就断了，还好，确实是我太心急了点，让人误解也没办法，全都怪我。   </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016的第一篇blog。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="llooper.space/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="llooper.space/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《带上她的眼睛》]]></title>
    <link href="llooper.space/2015/12/31/%E5%B8%A6%E4%B8%8A%E5%A5%B9%E7%9A%84%E7%9C%BC%E7%9D%9B/"/>
    <id>llooper.space/2015/12/31/带上她的眼睛/</id>
    <published>2015-12-31T09:11:09.000Z</published>
    <updated>2015-12-31T09:30:16.000Z</updated>
    <content type="html"><![CDATA[<p>一直对大刘怀有崇高的敬意，从三体开始。近来闲着没事，便索引其相关文章，对《带上她的眼睛》尤为喜欢,便敲下来留个念想。</p>
<a id="more"></a>
<h3 id="u58F0_u660E"><a href="#u58F0_u660E" class="headerlink" title="声明"></a>声明</h3><p>本文仅作为个人平时读读看看，未经同意不得转载，造成的后果一概与本人无关。</p>
<h3 id="u300A_u5E26_u4E0A_u5979_u7684_u773C_u775B_u300B"><a href="#u300A_u5E26_u4E0A_u5979_u7684_u773C_u775B_u300B" class="headerlink" title="《带上她的眼睛》"></a>《带上她的眼睛》</h3><h4 id="u4F5C_u8005_uFF1A_u5218_u6148_u6B23"><a href="#u4F5C_u8005_uFF1A_u5218_u6148_u6B23" class="headerlink" title="作者：刘慈欣"></a>作者：刘慈欣</h4><p>连续工作了两个多月，我实在累了，便请求主任给我两天假，出去短暂旅游一下散散心。主任答应了，条件是我再带一双眼睛去，我也答应了，于是他带我去拿眼睛。</p>
<p>眼睛放在控制中心走廊尽头的一个小房间里，现在还剩下十几双。主任递给我一双眼睛，指指前面的大屏幕，把眼睛的主人介绍给我，是一个好像刚毕业的小姑娘，呆呆地看着我。在肥大的太空服中，她更显得娇小，一副可怜兮兮的样子，显然刚刚体会到太空不是她在大学图书馆中想象的浪漫天堂，某些方面可能比地狱还稍差些。<br>“麻烦您了，真不好意思。她连连向我鞠躬，这是我听到过的最轻柔的声音，我想象着这声音从外太空飘来，象一阵微风吹过轨道上那些庞大粗陋的钢结构，使它们立刻变得象橡皮泥一样软。<br>“一点都不，我很高兴有个伴儿的。你想去那儿？”我豪爽地说。<br>“什么？您自己还没决定去哪儿？”她看上去很高兴。但我立刻感到两个异样的地方，其一，地面与外太空通讯都有延时，即使在月球，延时也有两秒钟，小行星带延时更长，但她的回答几乎感觉不到延时，这就是说，她现在在近地轨道，那里回地面不用中转，费用和时间都不需多少，没必要托别人带眼睛去度假。其二是她身上的太空服，做为航天个人装备工程师，我觉得这种太空服很奇怪：在服装上看不到防辐射系统，放在她旁边的头盔的面罩上也没有强光防护系统;我还注意到，这套服装的隔热和冷却系统异常发达。<br>“她在哪个空间站？”我扭头问主任。<br>“先别问这个吧。”主任的脸色很阴沉。<br>“别问好吗？”屏幕上的她也说，还是那副让人心软的小可怜样儿。<br>“你不会是被关禁闭吧？”我开玩笑说，因为她所在的舱室十分窄小，显然是一个航行体的驾驶舱，各种复杂的导航系统此起彼伏地闪烁着，但没有窗子，也没有观察屏幕，只有一支在她头顶打转的失重的铅笔说明她是在太空中。听了我的话，她和主任似乎都愣了一下，我赶紧说：“好，我不问自己不该知道的事了，你还是决定我们去哪儿吧。<br>这个决定对她很艰难，她的双手在太空服的手套里握在胸前，双眼半闭着，似乎是在决定生存还是死亡，或者认为地球在我们这次短暂的旅行后就要爆炸了。我不由笑出声来。<br>“哦，这对我来说不容易，您要是看过海伦·凯勒的三天所见的话，就能明白这多难了！”<br>“我们没有三天，只有两天。在时间上，这个时代的人都是穷光蛋。但比那个二十世纪盲人的幸运的是，我和你的眼睛在三小时内可到达地球的仍何一个地方。”<br>“那就去我们起航前去过的地方吧！”她告诉了我那个地方，于是我带着她的眼睛去了。   </p>
<h4 id="u8349_u539F"><a href="#u8349_u539F" class="headerlink" title="草原"></a>草原</h4><p>这是高山与平原，草原与森林的交接处，距我工作的航天中心有两千多公里，乘电离层飞机用了15分钟就到了这儿。面前的塔克拉玛干，经过几代人的努力，已由沙漠变成了草原，又经过几代强有力的人口控制，这儿再次变成了人迹罕至的地方。<br>现在大草原从我面前一直延伸到天边，背后的天山覆盖着暗绿色的森林，几座山顶还有银色的雪冠。我掏出她的眼睛戴上。<br>所谓眼睛就是一付传感眼镜，当你戴上它时，你所看到的一切图象由超高频信息波发射出去，可以被远方的另一个戴同样传感眼镜的人接收到，于是他就能看到你所看到的一切，就象你带着他的眼睛一样。<br>现在，长年在月球和小行星带工作的人已有上百万，他们回地球度假的费用是惊人的，于是吝啬的宇航局就设计了这玩艺儿，于是每个生活在外太空的宇航员在地球上都有了另一双眼睛，由这里真正能去度假的幸运儿带上这双眼睛，让身处外太空的那个思乡者分享他的快乐。这个小玩艺开始被当做笑柄，但后来由于用它“度假”的人能得到可观的补助，竟流行开来。最尖端的技术被采用，这人造眼睛越做越精致，现在，它竟能通过采集戴着它的人的脑电波，把他(她)的触觉和味觉一同发射出去。多带一双眼睛去度假成了宇航系统地面工作人员从事的一项公益活动，由于度假中的隐私等原因，并不是每个人都乐意再带双眼睛，但我这次无所谓。<br>我对眼前的景色大发感叹，但从她的眼睛中，我听到了一阵轻轻的抽泣声。<br>“上次离开后，我常梦到这里，现在回到梦里来了！”她细细的声音从她的眼睛中传出来，“我现在就象从很深很深的水底冲出来呼吸到空气，我太怕封闭了。<br>我从中真的听到她在做深呼吸。<br>我说：“可你现在并不封闭，同你周围的太空比起来，这草原太小了。”<br>她沉默了，似乎连呼吸都停止了。<br>“啊，当然，太空中的人还是封闭的，二十世纪的一个叫耶格尔的飞行员曾有一句话，是描述飞船中的宇航员的，说他们象……”“罐头中的肉。”<br>我们都笑了起来。她突然惊叫：“呀，花儿，有花啊！上次我来时没有的！”是的，广阔的草原上到处点缀着星星点点的小花。“能近些看看那朵花吗？”，我蹲下来看，“呀，真美耶！能闻闻她吗？不，别拔下她！”，我只好半趴到地上闻，一缕淡淡的清香，“啊，我也闻到了，真象一首隐隐传来的小夜曲呢！”<br>我笑着摇摇头，这是一个闪电变幻疯狂追逐的时代，女孩子们都浮躁到了极点，象这样的见花落泪的林妹妹真是太少了。<br>“我们给这朵小花起个名字好吗？嗯……叫她梦梦吧。我们再看看那一朵好吗？<br>他该叫什么呢？嗯，叫小雨吧;再到那一朵那儿去，啊，谢谢，看她的淡蓝色，她的名字应该是月光……“<br>我们就这样一朵朵地看花，闻花，然后再给它起名字。她陶醉于其中，没完没了地进行下去，忘记了一切。我对这套小女孩的游戏实在厌烦了，到我坚持停止时，我们已给上百朵花起了名字。<br>一抬头，我发现已走出了好远，便回去拿丢在后面的背包，当我拾起草地上的背包时，又听到了她的惊叫：“天啊，你把小雪踩住了！”我扶起那朵白色的野花，觉得很可笑，就用两只手各捂住一朵小花，问她：“她们都叫什么？什么样儿？”<br>“左边那朵叫水晶，也是白色的，它的茎上有分开的三片叶儿;右边那朵叫火苗，粉红色，茎上有四片叶子，上面两片是单的，下面两片连在一起。”<br>她说的都对，我有些感动了。<br>“你看，我和她们都互相认识了，以后漫长的日子里，我会好多次一遍遍地想她们每一个的样儿，象背一本美丽的童话书。你那儿的世界真好！”<br>“我这儿的世界？要是你再这么孩子气地多愁善感下去，这也是你的世界了，那些挑剔的太空心理医生会让你永远呆在地球上。”<br>我在草原上无目标地漫步，很快来到一条隐没在草丛中的小溪旁。我迈过去继续向前走，她叫住了我，说：“我真想把手伸到小河里。”我蹲下来把手伸进溪水，一股清凉流遍全身，她的眼睛用超高频信息波把这感觉传给远在太空中的她，我又听到了她的感叹。<br>“你那儿很热吧？”我想起了她那窄小的控制舱和隔热系统异常发达的太空服。<br>“热，热得象……地狱。呀，天啊，这是什么？草原的风？！”这时我刚把手从水中拿出来，微风吹在湿手上凉丝丝的，“不，别动，这就是天国的风呀！”我把双手举在草原的微风中，直到手被吹干。然后应她的要求，我又把手在溪水中打湿，再举到风中把天国的感觉传给她。我们就这样又消磨了很长时间。<br>再次上路后，沉默地走了一段，她又轻轻地说：“你那儿的世界真好。”<br>我说：“我不知道，灰色的生活把我这方面的感觉都磨钝了。”<br>“怎么会呢？！这世界能给人多少感觉啊！谁要能说清这些感觉，就如同说清大雷雨有多少雨点一样。看天边那大团的白云，银白银白的，我这时觉得它们好像是固态的，象发光玉石构成的高山。下面的草原，这时倒象是气态的，好像所有的绿草都飞离了大地，成了一片绿色的云海。看！当那片云遮住太阳又飘开时，草原上光和影的变幻是多么气势磅薄啊！看看这些，您真的感受不到什么吗？”   </p>
<p>……</p>
<p>我带着她的眼睛在草原上转了一天，她渴望地看草原上的每一朵野花，每一棵小草，看草丛中跃动的每一缕阳光，渴望地听草原上的每一种声音。一条突然出现的小溪，小溪中的一条小鱼，都会令她激动不已;一阵不期而至的微风，风中一缕绿草的清香都会让她落泪……我感到，她对这个世界的情感已丰富到病态的程度。<br>日落前，我走到了草原中一间孤伶伶的白色小屋，那是为旅游者准备的一间小旅店，似乎好久没人光顾了，只有一个迟钝的老式机器人照看着旅店里的一切。我又累又饿，可晚饭只吃到一半，她又提议我们立刻去看日落。<br>“看着晚霞渐渐消失，夜幕慢慢降临森林，就象在听一首宇宙间最美的交响曲。”<br>她陶醉地说。我暗暗叫苦，但还是拖着沉重的双腿去了。<br>草原的落日确实很美，但她对这种美倾泻的情感使这一切有了一种异样的色彩。<br>“你很珍视这些平凡的东西。”回去的路上我对她说，这时夜色已很重，星星已在夜空中出现。<br>“你为什么不呢，这才象在生活。”她说。<br>“我，还有其他的大部分人，不可能做到这样。在这个时代，得到太容易了。物质的东西自不必说，蓝天绿水的优美环境、乡村和孤岛的宁静等等都可以毫不费力地得到;甚至以前人们认为最难寻觅的爱情，在虚拟现实网上至少也可以暂时体会到。<br>所以人们不再珍视什么了，面对着一大堆伸手可得的水果，他们把拿起的每一个咬一口就扔掉。<br>“但也有人面前没有这些水果。”她低声说。<br>我感觉自己剌痛了她，但不知为什么。回去的路上，我们都没再说话。<br>这天夜里的梦境中，我看到了她，穿着太空服在那间小控制舱中，眼里含泪，向我伸出手来喊：“快带我出去，我怕封闭！”我惊醒了，发现她真在喊我，我是戴着她的眼睛仰躺着睡的。<br>“请带我出去好吗？我们去看月亮，月亮该升起来了！”<br>我脑袋发沉，迷迷糊糊很不情愿地起了床。到外面后发现月亮真的刚升起来，草原上的夜雾使它有些发红。   月光下的草原也在沉睡，有无数点萤火虫的幽光在朦朦胧胧的草海上浮动，仿佛是草原的梦在显形。<br>我伸了个懒腰，对着夜空说：“喂，你是不是从轨道上看到月光照到这里？告诉我你的飞船的大概方位，说不定我还能看到呢，我肯定它是在近地轨道上。”<br>她没有回答我的话，而是自己轻轻哼起了一首曲子，一小段旋律过后，她说：“这是德彪西的《月光》。”又接着哼下去，陶醉于其中，完全忘记了我的存在。《月光》的旋律同月光一起从太空降落到草原上。我想象着太空中的那个娇弱的女孩，她的上方是银色的月球，下面是蓝色的地球，小小的她从中间飞过，把音乐溶入月光……<br>直到一个小时后我回去躺到床上，她还在哼着音乐，是不是德彪西的我就不知道了，那轻柔的乐声一直在我的梦中飘荡着。<br>不知过了多久，音乐变成了呼唤，她又叫醒了我，还要出去。<br>“你不是看过月亮了吗？！”我生气地说。<br>“可现在不一样了，记得吗，刚才西边有云的，现在那些云可能飘过来了，现在月亮正在云中时隐时现呢，想想草原上的光和影，多美啊，那是另一种音乐了，求你带我的眼睛出去吧！”<br>我十分恼火，但还是出去了。云真的飘过来了，月亮在云中穿行，草原上大块的光斑在缓缓浮动，如同大地深处浮现的远古的记忆。<br>“你象是来自十八世纪的多愁善感的诗人，完全不适合这个时代，更不适合当宇航员。”我对着夜空说，然后摘下她的眼睛，挂到旁边一棵红柳的枝上，“你自己看月亮吧，我真的得睡觉去了，明天还要赶回航天中心，继续我那毫无诗意的生活呢。”<br>她的眼睛中传出了她细细的声音，我听不清说什么，径自回去了。<br>我醒来时天已大亮，阴云已布满了天空，草原笼罩在蒙蒙的小雨中。她的眼睛仍挂在红柳枝上，镜片上蒙上了一层水雾。我小心地擦干镜片，戴上它。原以为她看了一夜月亮，现在还在睡觉，却从眼睛中听到了她低低的抽泣声，我的心一下子软下来。<br>“真对不起，我昨天晚上实在太累了。”<br>“不，不是因为你，呜呜，天从三点半就阴了，五点多又下起雨……<br>“你一夜都没睡？！”<br>“……呜呜，下起雨，我，我看不到日出了，我好想看草原的日出，呜呜，好想看的，呜……<br>我的心象是被什么东西溶化了，脑海中出现她眼泪汪汪，小鼻子一抽一抽的样儿，眼睛竟有些湿润。不得不承认，在过去的一天一夜里，她教会了我某种东西，一种说不清的东西，象月夜中草原上的光影一样朦胧，由于它，以后我眼中的世界与以前会有些不同的。<br>“草原上总还会有日出的，以后我一定会再带你的眼睛来，或者，带你本人来看，好吗？”<br>她不哭了，(此处去掉一句)，突然，她低声说：<br>“听……”<br>我没听见什么，但紧张起来。<br>“这是今天的第一声鸟叫，雨中也有鸟呢！”她激动地说，那口气如同听到世纪钟声一样庄严。      </p>
<p>※※※</p>
<h4 id="u843D_u65E5_u516D_u53F7"><a href="#u843D_u65E5_u516D_u53F7" class="headerlink" title="落日六号"></a>落日六号</h4><p>又回到了灰色的生活和忙碌的工作中，以上的经历很快就淡忘了。很长时间后，当我想起洗那些那次旅行时穿的衣服时，在裤脚上发现了两三棵草籽。同时，在我的意识深处，也有一棵小小的种子留了下来。在我孤独寂寞的精神沙漠中，那棵种子已长出了令人难以察觉的绿芽。虽然是无意识地，当一天的劳累结束后，我已能感觉到晚风吹到脸上时那淡淡的诗意，鸟儿的鸣叫已能引起我的注意，我甚至黄昏时站在天桥上，看着夜幕降临城市……世界在我的眼中仍是灰色的，但星星点点的嫩绿在其中出现，并在增多。当这种变化发展到让我觉察出来时，我又想起了她。<br>也是无意识地，在闲暇时甚至睡梦中，她身处的环境常在我的脑海中出现，那封闭窄小的控制舱，奇怪的隔热太空服……后来这些东西在我的意识中都隐去了，只有一样东西凸现出来，这就是那在她头顶上打转的失重的铅笔，不知为什么，一闭上眼睛，这只铅笔总在我的眼前飘浮。终于有一天，上班时我走进航天中心高大的门厅，一幅见过无数次的巨大壁画把我吸引住了，壁画上是从太空中拍摄的蔚蓝色的地球。那只飘浮的铅笔又在我的眼前出现了，同壁画叠印在一起，我又听到了她的声音：<br>“我怕封闭……”一道闪电在我的脑海里出现。<br>除了太空，还有一个地方会失重！！<br>我发疯似地跑上楼，猛砸主任办公室的门，他不在，我心有灵犀地知道他在哪儿，就飞跑到存放眼睛的那个小房间，他果然在里面，看着大屏幕。她在大屏幕上，还在那个封闭的控制舱中，穿着那件“太空服”，画面凝固着，是以前录下来的。“是为了她来的吧。”主任说，眼睛还看着屏幕。<br>“她到底在哪儿？！”我大声问。<br>“你可能已经猜到了，她是’落日六号’的领航员。”<br>一切都明白了，我无力地跌坐在地毯上。<br>“落日工程”原计划发射十艘飞船，它们是“落日一号”到“落日十号”，但计划由于“落日六号”的失事而中断了。“落日工程”是一次标准的探险航行，它的航行程序同航天中心的其它航行几乎一样。<br>唯一不同的是，“落日”飞船不是飞向太空，而是潜入地球深处。<br>第一次太空飞行一个半世纪后，人类开始了向相反方向的探险，“落日”系列地航飞船就是这种探险的首次尝试。<br>四年前，我在电视中看到过“落日一号”发射时的情景。那时正是深夜，吐鲁番盆地的中央出现了一个如太阳般耀眼的火球，火球的光芒使新疆夜空中的云层变成了绚丽的朝霞。当火球暗下来时，“落日一号”已潜入地层。大地被烧红了一大片，这片圆形的发着红光的区域中央，是一个岩浆的湖泊，白热化的岩浆沸腾着，激起一根根雪亮的浪柱……那一夜，远至乌鲁木奇，都能感到飞船穿过地层时传到大地上的微微振动。<br>“落日工程”的前五艘飞船都成功地完成了地层航行，安全返回地面。其中“落日五号”创造了迄今为止人类在地层中航行深度的记录：海平面下3100公里。“落日六号”不打算突破这个记录。因为据地球物理学家的结论，在地层3400-3500公里深处，存在着地幔和地核的交界面，学术上把它叫做“古腾堡不连续面”，一旦通过这个交界面，便进入地球的液态铁镍核心，那里物质密度骤然增大，“落日六号”的设计强度是不允许在如此大的密度中航行的。<br>“落日六号”的航行开始很顺利，飞船只用了两个小时便穿过了地表和地幔的交界面—-莫霍不连续面，并在大陆板块漂移的滑动面上停留了五个小时，然后开始了在地幔中三千多公里的漫长航行。宇宙航行是寂寞的，但宇航员们能看到无限的太空和壮丽的星群;而地航飞船上的地航员们，只能凭感觉触摸飞船周围不断向上移去的高密度物质。从飞船上的全息后视电视中能看到这样的情景：炽热的岩浆剌目地闪亮着，翻滚着，随着飞船的下潜，在船尾飞快地合拢起来，瞬间充满了飞船通过的空间。有一名地航员回忆：他们一闭上眼睛，就看到了飞快合拢并压下来的岩浆，这个幻象使航行者意识到压在他们上方那巨量的并不断增厚的物质，一种地面上的人难以理解的压抑感折磨着地航飞船中的每一个人，他们都受到这种封闭恐惧症的袭击。<br>“落日六号”出色地完成着航行中的各项研究工作。飞船的速度大约是每小时15公里，飞船需要航行20小时才能到达预定深度。但在飞船航行15小时40分钟时，警报出现了。从地层雷达的探测中得知，航行区的物质密度由每立方厘米6。3克猛增到9。5克，物质成份由硅酸盐类突然变为以铁镍为主的金属，物质状态也由固态变为液态。尽管“落日六号”当时只到达了2500公里的深度，目前所有的迹象却冷酷地表明，他们闯入了地核！后来得知，这是地幔中一条通向地核的裂隙，地核中的高压液态铁镍充满了这条裂隙，使得在“落日六号”的航线上，古腾堡不连续面向上延伸了近1000公里！飞船立刻紧急转向，企图冲出这条裂隙，不幸就在这时发生了：由中子材料制造的船体顶住了突然增加到每平方厘米1600吨的巨大压力，但是，飞船分为前部烧熔发动机、中部主舱和后部推进发动机三大部分，当飞船在远大于设计密度和设计压力的液态铁镍中转向时，烧熔发动机与主舱结合部断裂，从“落日六号”用中微子通讯发回的画面中我们看到，已与船体分离的烧熔发动机在一瞬间被发着暗红光的液态铁镍吞没了。地层飞船的烧熔发动机用超高温射流为飞船切开航行方向的物质，没有它，只剩下一台推进发动机的“落日六号”在地层中是寸步难行的。地核的密度很惊人，但构成飞船的中子材料密度更大，液态铁镍对飞船产生的浮力小于它的自重，于是，“落日六号”便向地心沉下去。<br>人类登月后，用了一个半世纪才有能力航行到土星。在地层探险方面，人类也要用同样的时间才有能力从地幔航行到地核。现在的地航飞船误入地核，就如同二十世纪中期的登月飞船偏离月球迷失于外太空，获救的希望是丝毫不存在的。<br>好在“落日六号”主舱的船体是可靠的，船上的中微子通讯系统仍和地面控制中心保持着完好的联系。以后的一年中，“落日六号”航行组坚持工作，把从地核中得到了大量宝贵资料发送到地面。他们被裹在几千公里厚的物质中，这里别说空气和生命，连空间都没有，周围是温度高达五千度，压力可以把碳在一秒钟内变成金钢石的液态铁镍！它们密密地挤在“落日六号”的周围，密得只有中微子才能穿过，“落日六号”是处于一个巨大的炼钢炉中！在这样的世界里，但丁神曲中的地狱篇简直像是在描写天堂了；在这样的世界里，生命算什么？仅仅能用脆弱来描写它吗？<br>沉重的心理压力象毒蛇一样撕裂着“落日六号”地航员们的神经。一天，船上的地质工程师从睡梦中突然跃起，竟打开了他所在的密封舱的绝热门！虽然这只是四道绝热门中的第一道，但瞬间涌入的热浪立刻把他烧成了一段木炭。指令长在一个密封舱飞快地关上了绝热门，避免了“落日六号”的彻底毁灭。他自己被严重烧伤，在写完最后一页航行日志后死去了。<br>从那以后，在这个星球的最深处，在“落日六号”上，只剩下她一个人了。<br>现在，“落日六号”内部已完全处于失重状态，飞船已下沉到6800公里深处，那里是地球的最深处，她是第一个到达地心的人。<br>她在地心的世界是那个活动范围不到10平方米的闷热的控制舱。飞船上有一个中微子传感眼镜，这个装置使她同地面世界多少保持着一些感性的联系。但这种如同生命线的联系不能长时间延续下去，飞船里中微子通讯设备的能量很快就要耗尽，现有的能量已不能维持传感眼镜的超高速数据传输，这种联系在三个月前就中断了，具体时间是在我从草原返回航天中心的飞机上，当时我已把她的眼睛摘下来放到旅行包中。<br>那个没有日出的细雨蒙蒙的草原早晨，竟是她最后看到的地面世界。<br>后来“落日六号”同地面只能保持着语音和数据通讯，而这个联系也在一天深夜中断了，她被永远孤独地封闭于地心中。<br>“落日六号”的中子材料外壳足以抵抗地心的巨大压力，而飞船上的生命循环系统还可以运行五十至八十年，她将在这不到10平方米的地心世界里渡过自己的余生。<br>我不敢想象她同地面世界最后告别的情形，但主任让我听的录音出乎我的意料。<br>这时来自地心的中微子波束已很弱，她的声音时断时续，但这声音很平静。<br>“……你们发来的最后一份补充建议已经收到，今后，我会按照整个研究计划努力工作的。将来，可能是几代人以后吧，也许会有地心飞船找到’落日六号’并同它对接，有人会再次进入这里，但愿那时我留下的资料会有用。请你们放心，我会在这里安排好自己生活的。我现在已适应这里，不再觉得狭窄和封闭了，整个世界都围着我呀，我闭上眼睛就能看见上面的大草原，还可以清楚地看见每一朵我起了名字的小花呢。再见。”     </p>
<p>※※※</p>
<h4 id="u900F_u660E_u5730_u7403"><a href="#u900F_u660E_u5730_u7403" class="headerlink" title="透明地球"></a>透明地球　</h4><p>在以后的岁月中，我到过很多地方，每到一个处，我都喜欢躺在那里的大地上。<br>我曾经躺在海南岛的海滩上、阿拉斯加的冰雪上、俄罗斯的白桦林中、撒哈拉烫人的沙漠上。……每到那个时刻，地球在我脑海中就变得透明了，在我下面六千多公里深处，在这巨大的水晶球中心，我看到了停汨在那里的“落日六号”地航飞船，感受到了从几千公里深的地球中心传出的她的心跳。我想象着金色的阳光和银色的月光透射到这个星球的中心，我听到了那里传出的她吟唱的《月光》，还听到她那轻柔的话音：<br>“……多美啊，这又是另一种音乐了……<br>有一个想法安慰着我：不管走到天涯海角，我离她都不会再远了。<br>(完)    </p>
<h3 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h3><p> 文不长，科幻中又带着对人性的一些思考，挺喜欢，不想过多评论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直对大刘怀有崇高的敬意，从三体开始。近来闲着没事，便索引其相关文章，对《带上她的眼睛》尤为喜欢,便敲下来留个念想。</p>]]>
    
    </summary>
    
      <category term="book" scheme="llooper.space/tags/book/"/>
    
      <category term="杂书" scheme="llooper.space/categories/%E6%9D%82%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu亮度设置]]></title>
    <link href="llooper.space/2015/12/31/ubuntu-brightness-control/"/>
    <id>llooper.space/2015/12/31/ubuntu-brightness-control/</id>
    <published>2015-12-31T08:55:56.000Z</published>
    <updated>2015-12-31T09:31:27.000Z</updated>
    <content type="html"><![CDATA[<p>pc机子为宏碁，双系统装了Ubuntu后发现亮度无法调节，且默认为最大，亮瞎了我的铝合金眼，还是赶紧研究怎么偷懒调节吧。</p>
<a id="more"></a>
<h3 id="Ubuntu_u4EAE_u5EA6_u8C03_u8282"><a href="#Ubuntu_u4EAE_u5EA6_u8C03_u8282" class="headerlink" title="Ubuntu亮度调节"></a>Ubuntu亮度调节</h3><h4 id="u4EAE_u5EA6_u65E0_u6CD5_u8C03_u8282_u7684_u539F_u56E0"><a href="#u4EAE_u5EA6_u65E0_u6CD5_u8C03_u8282_u7684_u539F_u56E0" class="headerlink" title="亮度无法调节的原因"></a>亮度无法调节的原因</h4><p> 每次重装ubuntu时都因为显示比较亮，很刺眼的问题纠结。去查找了一下相关资料，发现：<br><code>NVIDIA GEFORCE</code>独立显卡没有为Linux系统开发显卡驱动，导致无法使用Fn或者直接在图形界面中调节亮度。<br>Linux大神还曾经因为这个吐槽过NVIDIA公司的，想要八卦的自行去看吧。</p>
<h4 id="u8C03_u8282_u65B9_u6CD5"><a href="#u8C03_u8282_u65B9_u6CD5" class="headerlink" title="调节方法"></a>调节方法</h4><p> 修改亮度存储文件<code>brightness</code>的亮度参数。网上说里边的参数是百分比，亲测实际不是，一打开时显示900多的。<br>brightness文件位置如下：<code>/sys/class/backlight/intel_backlight</code> 中，cd到该目录下ls一下就可以看到brightness文件了。<br>直接<code>sudo vim brightness</code>然后将参数修改为个人比较习惯的亮度就ok，本人比较习惯100-150的。</p>
<h4 id="u4FEE_u6539_u914D_u7F6E_u6587_u4EF6"><a href="#u4FEE_u6539_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p> 上面所说的修改只能保证当前使用时的状态，重启后又会变回很刺眼的情况，即birghtness中的数据又恢复为初始值。<br>要使得不用每次都很麻烦的去修改之中的数据，想到了修改系统启动配置文件<code>rc.local</code>。<br><code>rc.local</code>为系统启动之后会执行的文件，初始化一些脚本，我们只需往其中添加我们需要开机启动的执行脚本就可以了。<br>操作如下： <code>sudo vim /etc/rc.local</code><br>打开<code>rc.loca</code>l后，在<code>exit 0</code>之前添加一句脚本，将亮度数据写入birghtness文件即可，如下：<br><code>echo 150 &gt; /sys/class/backlight/intel_backlight/brightness</code></p>
<p>配置自己想要的ubuntu亮度操作基本完成了。</p>
<h4 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h4><p>以上方法在开机时候就直接写入了亮度值，值已固定，是无法通过键盘去进行调节。（并没有解决驱动方面的问题）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>pc机子为宏碁，双系统装了Ubuntu后发现亮度无法调节，且默认为最大，亮瞎了我的铝合金眼，还是赶紧研究怎么偷懒调节吧。</p>]]>
    
    </summary>
    
      <category term="brightness" scheme="llooper.space/tags/brightness/"/>
    
      <category term="ubuntu" scheme="llooper.space/tags/ubuntu/"/>
    
      <category term="Ubuntu" scheme="llooper.space/categories/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android系统源码集成第三方APP并编译到system.img中]]></title>
    <link href="llooper.space/2015/12/31/Android-frameworks-add-default-apps/"/>
    <id>llooper.space/2015/12/31/Android-frameworks-add-default-apps/</id>
    <published>2015-12-31T06:13:55.000Z</published>
    <updated>2016-01-05T02:06:48.000Z</updated>
    <content type="html"><![CDATA[<p>预制APP到Android系统，成为系统默认APPS。<br><a id="more"></a></p>
<h3 id="u6982_u8BBA"><a href="#u6982_u8BBA" class="headerlink" title="概论"></a>概论</h3><p>将第三方厂商定制的APP编译进系统源码，随着system.img的烧录进设备。定制的APP分为以下几种形式添加到系统中：   </p>
<ul>
<li>带源码</li>
<li>apk文件</li>
<li>apk文件依赖so库</li>
</ul>
<h3 id="u5E26_u6E90_u7801_u7684APP_u7F16_u8BD1_u5230_u7CFB_u7EDF"><a href="#u5E26_u6E90_u7801_u7684APP_u7F16_u8BD1_u5230_u7CFB_u7EDF" class="headerlink" title="带源码的APP编译到系统"></a>带源码的APP编译到系统</h3><p>1) 在packages/apps/ 下创建一个新的项目，以HelloWorld为例；<br>2）参照apps下的其他项目目录结构，创建src、res以及编写Android.mk文件；<br>3）将你的资源文件以及源码copy到对应位置；<br>4）编写Android.mk文件；   </p>
<blockquote>
<p>Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等。之后会有另外篇章对Android.mk进行详解，在此就不多做解释。</p>
</blockquote>
<p>给出一个简单的Android.mk示例，参照自行修改成适合项目的。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">LOCAL_PATH</span>:= <span class="variable">$(call my-dir)</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="constant">LOCAL_MODULE_TAGS</span> := optional</span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := <span class="variable">$(call all-java-files-under, src)</span> \</span><br><span class="line"><span class="constant">LOCAL_PACKAGE_NAME</span> := HelloWorld</span><br><span class="line"><span class="constant">LOCAL_JAVA_LIBRARIES</span> := telephony-common</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure>
<h3 id="u65E0_u6E90_u7801_u7684APK_u6587_u4EF6_u7F16_u8BD1_u5230_u7CFB_u7EDF"><a href="#u65E0_u6E90_u7801_u7684APK_u6587_u4EF6_u7F16_u8BD1_u5230_u7CFB_u7EDF" class="headerlink" title="无源码的APK文件编译到系统"></a>无源码的APK文件编译到系统</h3><p>1) 在packages/apps/ 下创建一个新的项目，以HelloWorld为例；<br>2） 将apk文件copy到新建目录下，并创建android.mk文件；<br>3） 编写Android.mk文件。<br>示例如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">LOCAL_PATH</span> := <span class="variable">$(call my-dir)</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="comment"># Module name should match apk name to be installed</span></span><br><span class="line"><span class="constant">LOCAL_MODULE</span> := HelloWorld</span><br><span class="line"><span class="constant">LOCAL_MODULE_TAGS</span> := optional</span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := <span class="variable">$(LOCAL_MODULE)</span>.apk</span><br><span class="line"><span class="constant">LOCAL_MODULE_CLASS</span> := APPS</span><br><span class="line"><span class="constant">LOCAL_MODULE_SUFFIX</span> := <span class="variable">$(COMMON_ANDROID_PACKAGE_SUFFIX)</span></span><br><span class="line"><span class="constant">LOCAL_CERTIFICATE</span> := PRESIGNED</span><br><span class="line">include $(BUILD_PREBUILT)</span><br></pre></td></tr></table></figure>
<p><strong>这里有一点需要注意的，<code>LOCAL_MODULE</code>的值必须与apk的名字一致。</strong></p>
<h3 id="app_u9700_u8981_u4F9D_u8D56_u7B2C_u4E09_u65B9so_u5E93"><a href="#app_u9700_u8981_u4F9D_u8D56_u7B2C_u4E09_u65B9so_u5E93" class="headerlink" title="app需要依赖第三方so库"></a>app需要依赖第三方so库</h3><p>有一种情况是定制的app需要依赖于第三方jar包文件或者so库进行开发，这次主要介绍so库的使用，jar包另行查找。</p>
<ul>
<li>app有源码编译   </li>
</ul>
<blockquote>
<p>新建libs目录，将so库copy到该目录，下面主要工作是更新android.mk文件，将so库包含进去,以libBMapApiEngine_v1_3_1.so为例。</p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">LOCAL_PATH</span>:= <span class="variable">$(call my-dir)</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="constant">LOCAL_MODULE_TAGS</span> := optional</span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := <span class="variable">$(call all-java-files-under, src)</span> \</span><br><span class="line"><span class="constant">LOCAL_PACKAGE_NAME</span> := HelloWorld</span><br><span class="line"><span class="constant">LOCAL_JAVA_LIBRARIES</span> := telephony-common</span><br><span class="line">include $(BUILD_PACKAGE)  </span><br><span class="line"><span class="comment">##################################################  </span></span><br><span class="line">include $(CLEAR_VARS)    </span><br><span class="line"><span class="constant">LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES</span> :=libbaidumapapi:libs/baidumapapi.jar  </span><br><span class="line"><span class="constant">LOCAL_PREBUILT_LIBS</span> :=libBMapApiEngine_v1_3_1:libs/armeabi/libBMapApiEngine_v1_3_1.so  </span><br><span class="line"><span class="constant">LOCAL_MODULE_TAGS</span> := optional  </span><br><span class="line">include $(BUILD_MULTI_PREBUILT)  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># Use the following include to make our testapk.  </span></span><br><span class="line">include $(callall-makefiles-under,$(LOCAL_PATH))</span><br></pre></td></tr></table></figure>
<p>以上方案为网上<a href="http://zwz94.blog.163.com/blog/static/3206039520131111101412959/" target="_blank" rel="external">http://zwz94.blog.163.com/blog/static/3206039520131111101412959/</a>查找资料总结的，还没经过实际测试，可行性不能100%保证。</p>
<ul>
<li>纯apk文件</li>
</ul>
<p>因apk依赖于so库运行，编译过程没问题，但运行app会由于系统本身缺少对应so库而奔溃。</p>
<blockquote>
<p>主要步骤同上，关键需要将so库文件复制到系统的/system/lib目录下，使之能被app索引到。示例如下：</p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">LOCAL_PATH</span> := <span class="variable">$(call my-dir)</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="comment"># Module name should match apk name to be installed</span></span><br><span class="line"><span class="constant">LOCAL_MODULE</span> := HelloWorld</span><br><span class="line"><span class="constant">LOCAL_MODULE_TAGS</span> := optional</span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := <span class="variable">$(LOCAL_MODULE)</span>.apk</span><br><span class="line"><span class="constant">LOCAL_MODULE_CLASS</span> := APPS</span><br><span class="line"><span class="constant">LOCAL_MODULE_SUFFIX</span> := <span class="variable">$(COMMON_ANDROID_PACKAGE_SUFFIX)</span></span><br><span class="line"><span class="constant">LOCAL_CERTIFICATE</span> := PRESIGNED</span><br><span class="line">include $(BUILD_PREBUILT)</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="constant">LOCAL_MODULE</span> := libgdamapv4sdk751.so</span><br><span class="line"><span class="constant">LOCAL_MODULE_CLASS</span> := SHARED_LIBRARIES</span><br><span class="line"><span class="constant">LOCAL_MODULE_PATH</span> := <span class="variable">$(TARGET_OUT_SHARED_LIBRARIES)</span></span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := lib/armeabi/<span class="variable">$(LOCAL_MODULE)</span></span><br><span class="line"><span class="constant">OVERRIDE_BUILD_MODULE_PATH</span> := <span class="variable">$(TARGET_OUT_INTERMEDIATE_LIBRARIES)</span></span><br><span class="line">include $(BUILD_PREBUILT)</span><br></pre></td></tr></table></figure>
<p><strong>纯apk文件编译进系统，且依赖so库。复制so库到/system/lib目录的方案经过本人实际编译测试可行。</strong></p>
<h3 id="u53E6_u5916_u518D_u8BF4_u51E0_u53E5"><a href="#u53E6_u5916_u518D_u8BF4_u51E0_u53E5" class="headerlink" title="另外再说几句"></a>另外再说几句</h3><ul>
<li>有些客户对定制app在系统中的位置有要求，比如需要放置到/system/priv-app/中，此时你只需在android.mk中添加一句：<code>LOCAL_PRIVILEGED_MODULE := true</code>即可将app编译进priv-app目录。</li>
<li>还有要求预制app替代Android系统默认的app，也很简单，同样是编辑Android.mk文件，以SystemUI为例,添加一句：<code>LOCAL_OVERRIDES_PACKAGES:= SystemUI</code>。</li>
</ul>
<h3 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h3><p>将定制APP加入Android源码的build系统中，使之能跟随着其他app一起编译。</p>
<blockquote>
<p>修改build/target/product/generic_no_telephony.mk<br>新建项<br><em><code>PRODUCT_PACKAGES := HelloWorld</code></em></p>
</blockquote>
<p><strong>注意：<code>PRODUCT_PACKAGES</code>中填写的必须跟项目中Android.mk文件中定义的<code>LOCAL_PACKAGE_NAME</code>或者<code>LOCAL_MODULE</code>一致。</strong></p>
<p>以上全部完成后就可以对系统进行编译了。</p>
<blockquote>
<p>make clean<br>make -j$(nproc)</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>预制APP到Android系统，成为系统默认APPS。<br>]]>
    
    </summary>
    
      <category term="AOSP" scheme="llooper.space/tags/AOSP/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="frameworks" scheme="llooper.space/tags/frameworks/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为Android物理按键添加类似touch sound一样的声音]]></title>
    <link href="llooper.space/2015/12/31/Android-frameworks-SoundPool/"/>
    <id>llooper.space/2015/12/31/Android-frameworks-SoundPool/</id>
    <published>2015-12-31T02:17:46.000Z</published>
    <updated>2015-12-31T08:57:09.000Z</updated>
    <content type="html"><![CDATA[<p>给Android物理按键添加操作声音 </p>
<a id="more"></a>   
<p>目标：通过修改系统源码给物理旋钮添加操作提示音<br>实现：参照View的touch声音，在最底层的InputFilter接收输入事件，播放声音</p>
<blockquote>
<p>Android声音播放有俩种方式<code>MediaPlayer</code>跟<code>SoundPool</code>。</p>
<p>SoundPool —— 适合短促且对反应速度比较高的情况（游戏音效或按键声等）。</p>
<p>MediaPlayer —— 适合比较长且对时间要求不高的情况。   </p>
</blockquote>
<p>方案：针对SoundPool与MediaPlayer进行比较，由于旋钮操作较为短促，本次开发采用SoundPool进行。</p>
<p>车载盒子AOSP中封装了输入事件，代码位置:</p>
<p><code>/framework/base/services/java/com/android/server/CarInputHub.java</code></p>
<p>注意：需在CarInputHub初始化时便对SoundPool进行load，不然play声音时会报 no ready错误并且没有声音。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CarInputHub</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>(context.getMainLooper());</span><br><span class="line">    mContext = context;</span><br><span class="line"></span><br><span class="line">	mSoundPool = <span class="keyword">new</span> SoundPool(NUM_SOUNDPOOL_CHANNELS, AudioManager.STREAM_MUSIC, <span class="number">0</span>);</span><br><span class="line">	String filePath = <span class="string">"/system/media/audio/ui/suibian.ogg"</span>;</span><br><span class="line">	sampleId = mSoundPool.load(filePath, <span class="number">1</span>);</span><br><span class="line">	Log.i(TAG, <span class="string">"SoundPool init"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在点击处理点击事件的函数中进行play即可   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInputEvent</span><span class="params">(InputEvent inputEvent, <span class="keyword">int</span> policyFlags)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(inputEvent <span class="keyword">instanceof</span> KeyEvent)&#123;</span><br><span class="line">		KeyEvent event = (KeyEvent) inputEvent;</span><br><span class="line">		<span class="keyword">if</span>(event.getAction()==KeyEvent.ACTION_UP)&#123;</span><br><span class="line">			    playClickSound();</span><br><span class="line">		&#125;</span><br><span class="line">		.</span><br><span class="line">		.</span><br><span class="line">		.</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">playClickSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mSoundPool.play(sampleId, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>给Android物理按键添加操作声音 </p>]]>
    
    </summary>
    
      <category term="AOSP" scheme="llooper.space/tags/AOSP/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="frameworks" scheme="llooper.space/tags/frameworks/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过修改Android frameworks层源码设置默认字体]]></title>
    <link href="llooper.space/2015/12/31/Android-frameworks-fonts/"/>
    <id>llooper.space/2015/12/31/Android-frameworks-fonts/</id>
    <published>2015-12-31T02:13:42.000Z</published>
    <updated>2015-12-31T08:56:54.000Z</updated>
    <content type="html"><![CDATA[<p>修改Android源码添加并定制字体为默认字体。</p>
<a id="more"></a>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>近期在对Android系统源码进行一些个性化的修改，主要集中在<code>frameworks</code>层。本篇旨在将自添加或者已存在的字体包设置为系统默认的字体，满足产品的需求。<br>这次定制的系统版本为Android4.4，主要为4.4添加宋体验证修改效果，不喜宋体的略过。网络查找的资料提及4.X与5.X版本的系统在设置默认字体方面有一些区别，望想定制5.X及以上系统的朋友自行补充。</p>
<h3 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h3><h4 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h4><p>Android4.4版本系统字体配置文件主要有三个：</p>
<blockquote>
<p>/system/etc/system_fonts.xml</p><br><p>/system/etc/fallback_fonts.xml</p><br><p>/vendor/etc/fallback_fonts.xml</p>   

</blockquote>
<p>第一个文件用于定义系统默认字体，文本中的第一个字体系列就是系统默认的英文字体，后面的字体是某些语言或者某些应用下是使用。<br>第二个文件是用来定义系统默认字体找不到的字符的扩展字体库，按照从上到下的顺序进行索引。<br>最后到了一个比较大的文件，DroidSansFallback.ttf，来寻找中日韩以及其他特殊字符。<br>第三个文件为第三方定制产商添加字体的配置文件，Google为我们良好定制预留了接口。</p>
<h4 id="u5B9E_u6218"><a href="#u5B9E_u6218" class="headerlink" title="实战"></a>实战</h4><p>Android源码字体目录：<br><b><code>/frameworks/base/data/fonts/</code></b><br>针对上述分析，得出将自定义字体设置为Android系统默认的可修改方案：</p>
<p>1)暴力方式：将添加字体名字修改为DroidSansFallback.ttf，放置到系统源码<code>fonts</code>目录，替换掉原生DroidSansFallback.ttf。这种方式比较暴力，不建议采用，因为有可能导致某些字显示不正常或者不出现。   </p>
<p>2）修改<code>fonts</code>目录下的 <code>system_fonts.xml</code>文件。既然在4.x版本下，system_fonts.xml是系统默认字体的配置文件，且字体调用顺序从上到下，将自添加的字体包添加到该文件的第一的位置即为第一默认调用。 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">family</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="title">fileset</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="title">file</span>&gt;</span>MyFont.ttf<span class="tag">&lt;/<span class="title">file</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="title">fileset</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">family</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时还需将添加的字体包copy到生成的系统的/system/fonts/目录：修改<code>fonts</code>目录下的fonts.mk文件</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">PRODUCT_COPY_FILES</span> := \  </span><br><span class="line">	...</span><br><span class="line">	frameworks/base/data/fonts/MyFont.ttf:system/fonts/MyFont.ttf</span><br></pre></td></tr></table></figure>
<p>3)遵循Google预留接口进行自定制，对<code>vendor_fonts.xml</code>进行修改。对于厂商定制ROM备用字体文件，android官方指导规范的方法是，修改<code>/frameworks/base/data/fonts/vendor_fonts.xml</code>文件，并在<code>fonts.mk</code>文件中添加代码段，使此文件在构建过程中拷贝并重命名为<code>/vendor/etc/fallback_fonts.xml</code>文件。  </p>
<p><code>vendor_fonts.xml</code>修改:</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;familyset&gt;  </span><br><span class="line">	&lt;family order=<span class="string">"0"</span>&gt;  </span><br><span class="line">		&lt;fileset&gt;  </span><br><span class="line">			&lt;file&gt;MyFont.ttf&lt;/file&gt;  </span><br><span class="line">		&lt;/fileset&gt;  </span><br><span class="line">	&lt;/family&gt;   </span><br><span class="line">&lt;/familyset&gt;</span><br></pre></td></tr></table></figure>
<p>其中family order=”0”表示vendor字体插入<code>system_fonts.xml</code>的第一个位置。<br><code>fonts.mk</code>添加的代码段：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">PRODUCT_COPY_FILES</span> := \  </span><br><span class="line">	...</span><br><span class="line">	frameworks/base/data/fonts/vendor_fonts.xml:<span class="variable">$(TARGET_COPY_OUT_VENDOR)</span>/etc/fallback_fonts.xml \</span><br><span class="line">	frameworks/base/data/fonts/MyFont.ttf:system/fonts/MyFont.ttf</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="u8865_u5145"><a href="#u8865_u5145" class="headerlink" title="补充"></a>补充</h4><p><code>system_fonts.xml</code>配置了系统的内置字体，第一个family节点为系统默认字体。nameset节点的各个name子节点定义可用的字体名称，fileset节点的file子节点分别对应normal、bold、italic、bold-italic四种字体样式，如果file节点个数少于四个，相应字体样式会对应已有兄弟file节点的字体文件。<br><code>fallback_fonts.xml</code>配置了系统备用字体，只有在系统内置字体中找不到相应字符时，才会到备用字体中去寻找，family节点的顺序对应搜索顺序，搜索匹配规则采用BCP47的定义。<br><code>vendor/etc/fallback_fonts.xml</code>是为了规范厂商定制默认字体，加载备用字体配置时，会将此文件中定义的各个family插入到<code>system/etc/fallback_fonts.xml</code>中，插入位置由family节点order属性指定，如果没有order属性，默认会插入到最后。<br><em>SourceHanSansCN 思源字体已经加入系统，默认是Regular，如果设计要求使用 Medium或者Light的，直接调用下面的API就可以了<br><code>Typeface.createFromFile(&quot;/system/fonts/xxx.ttf&quot;);</code></em></p>
<h4 id="u6548_u679C_u5C55_u793A"><a href="#u6548_u679C_u5C55_u793A" class="headerlink" title="效果展示"></a>效果展示</h4><p>修改前：<br><img src="http://7xp9uy.com1.z0.glb.clouddn.com/FC2DE68F-9822-428F-84C2-658CE675F0B5.jpg" alt="P image"></p>
<p>修改后：<br><img src="http://7xp9uy.com1.z0.glb.clouddn.com/6B9083EB-EBA9-4328-BD42-7F66E1ADDAFC.png" alt="L image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>修改Android源码添加并定制字体为默认字体。</p>]]>
    
    </summary>
    
      <category term="AOSP" scheme="llooper.space/tags/AOSP/"/>
    
      <category term="Android" scheme="llooper.space/tags/Android/"/>
    
      <category term="frameworks" scheme="llooper.space/tags/frameworks/"/>
    
      <category term="AOSP" scheme="llooper.space/categories/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="llooper.space/2015/12/30/hello-world/"/>
    <id>llooper.space/2015/12/30/hello-world/</id>
    <published>2015-12-30T02:13:42.000Z</published>
    <updated>2015-12-31T05:46:19.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>d<br><br>## Quick Start<br><br>### Create a new post<br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
